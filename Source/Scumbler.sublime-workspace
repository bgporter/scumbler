{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wh",
				"white"
			],
			[
				"fCenter",
				"fCenterLineStopX"
			],
			[
				"effect",
				"effectBlockHeight"
			],
			[
				"setC",
				"setClickingTogglesState"
			],
			[
				"fDirty",
				"fDirtyPixels"
			],
			[
				"Colour",
				"Colours"
			],
			[
				"fDir",
				"fDirtyPixels"
			],
			[
				"fLoo",
				"fLoopSample"
			],
			[
				"cl",
				"Clear"
			],
			[
				"fLoop",
				"fLoopSample"
			],
			[
				"fDi",
				"fDirtyPixels"
			],
			[
				"fPi",
				"fPixelsReturned"
			],
			[
				"Wave",
				"WaveformPoint"
			],
			[
				"fPixel",
				"fPixelData"
			],
			[
				"pixel",
				"pixelVal"
			],
			[
				"fSampl",
				"fSamplesPerPixel"
			],
			[
				"info",
				"infoObj"
			],
			[
				"Get",
				"GetLoopDuration"
			],
			[
				"add",
				"addChangeListener"
			],
			[
				"kIn",
				"kInvalidNode"
			],
			[
				"dB",
				"dbToFloat"
			],
			[
				"buffer",
				"bufferLength"
			],
			[
				"get",
				"getNodeForId"
			],
			[
				"AudioP",
				"AudioProcessorGraph"
			],
			[
				"Plugin",
				"PluginEditorWindow"
			],
			[
				"Plu",
				"PluginEditorWindow"
			],
			[
				"Pl",
				"PluginInfo"
			],
			[
				"Plug",
				"PluginSlotComponent"
			],
			[
				"GetTrack",
				"GetTrackBounds"
			],
			[
				"fTrack",
				"fTrackCount"
			],
			[
				"fPre",
				"fPreEffectCount"
			],
			[
				"remo",
				"removeNode"
			],
			[
				"Inv",
				"kInvalidNode"
			],
			[
				"FInd",
				"FindNodeAfterIndex"
			],
			[
				"FindNode",
				"FindNodeBeforeIndex"
			],
			[
				"Find",
				"FindNodeAfterIndex"
			],
			[
				"begin",
				"beginTest"
			],
			[
				"getNext",
				"getNextCommandTarget"
			],
			[
				"li",
				"lineNum"
			],
			[
				"line",
				"linenum"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// Copyright (c) 2013 Bg Porter\n\n#include \"PluginBlockComponent.h\"\n#include \"ComponentDefs.h\"\n\nPluginBlockComponent::PluginBlockComponent(PluginBlock* plugins)\n:  fPlugins(nullptr)\n{\n   if (nullptr != plugins)\n   {\n      this->ConnectToPluginBlock(plugins);\n   }\n\n}\n\nPluginBlockComponent::~PluginBlockComponent()\n{\n\n}\n\nvoid PluginBlockComponent::paint (Graphics& g)\n{\n#ifdef qSketch\n   g.setColour(Colours::lightslategrey);\n   g.drawRect(0, 0, this->getWidth(), this->getHeight());\n#endif\n}\n\n\nvoid PluginBlockComponent::resized()\n{\n   int totalRequestedWidth = 0;\n   for (int i = 0; i < fSlots.size(); ++i)\n   {\n      PluginSlotComponent* slot = fSlots.getUnchecked(i);\n      int preferredWidth = slot->GetPreferredWidth();\n      totalRequestedWidth += preferredWidth;\n      this->SetSlotBounds(i, slot);\n   }\n}\n\n\nvoid PluginBlockComponent::SetSlotBounds(int index, PluginSlotComponent* slot)\n{\n   int blockWidth = this->getWidth();\n   int blockHeight = this->getHeight();\n   float slotHeight = blockHeight * kPluginSlotHeight;\n   float elementCount = fSlots.size() + 1.0;\n   float slotWidth = blockWidth / elementCount;\n   float margin = slotWidth / elementCount;\n\n   int x = (index + 1) * margin + index * slotWidth;\n   int y =  (blockHeight - slotHeight) / 2.0;\n   slot->setBounds(x, y, slotWidth, slotHeight);\n\n\n}\n\nvoid PluginBlockComponent::ConnectToPluginBlock(PluginBlock* plugins)\n{\n   // only do anything if we're changing something.\n   if (plugins != fPlugins)\n   {\n      if (fPlugins)\n      {\n         // disconnect.\n         fPlugins->removeChangeListener(this);\n      }\n   }\n   fPlugins = plugins;\n\n   if (fPlugins)\n   {\n      // connect to our new source of data.\n      fPlugins->addChangeListener(this);\n      if (fPlugins->Size() != fSlots.size())\n      {\n         fSlots.clear();\n         for (int i = 0; i < fPlugins->Size(); ++i)\n         {\n            PluginSlotComponent* slot = new PluginSlotComponent(fPlugins, i);\n            fSlots.add(slot);\n            this->addAndMakeVisible(slot);\n            //this->SetSlotBounds(i, slot);\n         }\n      }\n   }\n}\n\nvoid PluginBlockComponent::changeListenerCallback(ChangeBroadcaster* source)\n{\n   if (source == fPlugins)\n   {\n      this->repaint();\n   }\n\n}",
			"file": "Components/PluginBlockComponent.cpp",
			"file_size": 2223,
			"file_write_time": 1366552399000000,
			"settings":
			{
				"buffer_size": 2223,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Components/PluginBlockComponent.h",
			"settings":
			{
				"buffer_size": 1306,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Components/ComponentDefs.h",
			"settings":
			{
				"buffer_size": 687,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Components/PluginSlotComponent.h",
			"settings":
			{
				"buffer_size": 2118,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Components/PluginSlotComponent.cpp",
			"settings":
			{
				"buffer_size": 5459,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Copyright (c) 2013 Brett g Porter\n\n#include \"PluginBlock.h\"\n\nPluginBlock::PluginBlock(PluginConnector* scumbler, NodeId input, NodeId output, size_t size)\n:  fScumbler(scumbler)\n,  fInput(input)\n,  fOutput(output)\n{\n   fPlugins.resize(size);\n   // just in case someday the value of invalid node is something other than zero.\n   for (size_t i = 0; i < size; ++i)\n   {\n      fPlugins.set(i, tk::kInvalidNode);\n   }\n\n   // we don't check the return. If they're already connected, that's cool. \n   // We should really be checking this, though, and throwing an exception\n   // if there's a more serious problem.\n   fScumbler->Connect(input, output);\n}\n\n\n\nPluginBlock::~PluginBlock()\n{\n   for (int i = 0; i < fPlugins.size(); ++i)\n   {\n      PluginInfo currentNode = fPlugins[i];\n      if (tk::kInvalidNode != currentNode.id)\n      {\n         PluginInfo before = this->FindPluginBeforeIndex(i);\n         PluginInfo after = this->FindPluginAfterIndex(i);\n         // remove the current node and delete it. We can probably rewrite this in \n         // terms of our own DeleteNode() method, yet to be written.\n         fScumbler->RemoveBetween(before.id, currentNode.id, after.id, true);\n      }\n   }\n}\n\nint PluginBlock::Size() const\n{\n   return fPlugins.size();\n}\n\ntk::Result PluginBlock::InsertPluginAtIndex(PluginInfo plugin, int index)\n{\n   tk::Result retval = tk::kIndexOutOfRange;\n   if (index >= 0 && index < this->Size())\n   {\n      if (tk::kInvalidNode == this->PluginInSlot(index).id)\n      {\n         // the index is in range, and the slot is empty.\n         // Now, connect everything together:\n         PluginInfo before = this->FindPluginBeforeIndex(index);\n         PluginInfo after = this->FindPluginAfterIndex(index);\n         if (tk::kInvalidNode != before.id && tk::kInvalidNode != after.id)\n         {\n            retval = fScumbler->InsertBetween(before.id, plugin.id, after.id);\n            if (tk::kSuccess == retval)\n            {\n               fPlugins.set(index, plugin); \n               this->sendChangeMessage();\n            }\n         }\n         else\n         {\n            // unknown weird failure.\n            retval = tk::kFailure;\n         }\n      }\n      else\n      {\n         retval = tk::kSlotFull;\n      }\n   }\n   return retval;\n}\n\ntk::Result PluginBlock::RemovePluginAtIndex(int index, bool deleteNode)\n{\n   tk::Result retval = tk::kIndexOutOfRange;\n   if (index >= 0 && index < this->Size())\n   {\n      PluginInfo plugin = this->PluginInSlot(index);\n      if (tk::kInvalidNode != plugin.id)\n      {\n         PluginInfo before = this->FindPluginBeforeIndex(index);\n         PluginInfo after = this->FindPluginAfterIndex(index);\n         if (tk::kInvalidNode != before.id && tk::kInvalidNode != after.id)\n         {\n            retval = fScumbler->RemoveBetween(before.id, plugin.id, after.id, deleteNode);\n            if (tk::kSuccess == retval)\n            {\n               fPlugins.set(index, PluginInfo());\n            }\n            this->sendChangeMessage();\n         }\n         else\n         {\n            // unknown weird failure.\n            retval = tk::kFailure;\n         }\n      }\n      else\n      {\n         // this slot was empty.\n         retval = tk::kNoTargetNode;\n      }\n   }  \n   return retval; \n}\n\nPluginInfo PluginBlock::PluginInSlot(int index) const\n{\n   PluginInfo retval;\n   if (index >= 0 && index < this->Size())\n   {\n      // We'll either return a real node if there's one in place, otherwise invalid node.\n      // \n      retval = fPlugins[index];\n   }\n   return retval;\n}\n\nPluginInfo PluginBlock::LoadPlugin(const PluginDescription& description, String& errorMessage)\n{\n   NodeId newNode = fScumbler->LoadPlugin(description, errorMessage);\n   return PluginInfo(newNode, description.name);\n}\n\n\ntk::Result PluginBlock::LoadPluginAtIndex(int index, const PluginDescription& desc, String& msg)\n{\n   tk::Result retval = tk::kSlotFull;\n   if (tk::kInvalidNode == this->PluginInSlot(index).id)\n   {\n      retval = tk::kPluginLoadError;\n      PluginInfo newPlugin = this->LoadPlugin(desc, msg);\n      if (tk::kInvalidNode != newPlugin.id)\n      {\n         retval = this->InsertPluginAtIndex(newPlugin, index);\n         // that may have failed for weird reasons. If so, we need to delete the plugin \n         // that we just loaded.\n         if (tk::kSuccess != retval)\n         {\n            // we actually ignore the result here; we need to report failure, so \n            // reporting success here would be useless. If this fails, we have other problems.\n            fScumbler->DeleteNode(newPlugin.id);\n         }\n      }\n   }\n   return retval;\n}\n\nAudioProcessorEditor* PluginBlock::GetEditorForIndex(int index, bool useGeneric)\n{\n   AudioProcessorEditor* retval = nullptr;\n\n   PluginInfo plugin = this->PluginInSlot(index);\n   if (tk::kInvalidNode != plugin.id)\n   {\n      retval = fScumbler->GetEditorForNode(plugin.id, useGeneric);\n   }\n   return retval;\n}\n\nPluginInfo PluginBlock::FindPluginBeforeIndex(int i)\n{\n   PluginInfo retval = PluginInfo(fInput, \"Input\");\n   if (i > 0)\n   {\n      for (int j = i-1; j > -1; --j)\n      {\n         if (fPlugins[j].id != tk::kInvalidNode)\n         {\n            retval = fPlugins[j];\n            break;\n         }\n      }\n   }\n   // either we found a valid node & have set retval or the only thing before this \n   // is the input. Return it.\n   return retval;\n}\n\nPluginInfo PluginBlock::FindPluginAfterIndex(int i)\n{\n   PluginInfo retval = PluginInfo(fOutput, \"Output\");\n   int size = fPlugins.size();\n   if (i < (size-1))\n   {\n      for (int j = i+1; j < size; ++j)\n      {\n         if (fPlugins[j].id != tk::kInvalidNode)\n         {\n            retval = fPlugins[j];\n            break;\n         }\n      }   \n   }\n   return retval;\n}\n\n\n/// KEEP THIS SECTION AT THE END OF THE FILE.\n#ifdef qUnitTests\n#include \"Test/test_PluginBlock.cpp\"\n#endif\n",
			"file": "PluginBlock.cpp",
			"file_size": 5843,
			"file_write_time": 1360524333000000,
			"settings":
			{
				"buffer_size": 5843,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 227.0,
		"selected_items":
		[
			[
				"pac in",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"",
				":w - Save"
			],
			[
				":w",
				":w - Save"
			],
			[
				"lore",
				"Snippet: Lorem ipsum"
			],
			[
				"Snippet: ",
				"Snippet: newTask"
			],
			[
				":wa",
				":w - Save"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"tag",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				":q",
				"Set Syntax: SQL"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 143.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginEditorWindow.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TrackComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TrackComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.sublime-project",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/ScumblerDefs.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/LoopComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/WaveformComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/WaveformComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Loop.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Loop.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/LoopComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Passthrough.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Passthrough.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginSlotComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginListWindow.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/MainWindow.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Main.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/thumbnail.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/WaveformPixelBuffer.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Track.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Gain.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Gain.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TransportComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Track.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TransportComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ScumblerComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ScumblerComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Loop.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/MainWindow.h",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoRecordPage.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoLatencyPage.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginBlockComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginBlockComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_PluginBlock.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginConnector.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginEditorWindow.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginBlock.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginBlock.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginSlotComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_Track.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Commands.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginListWindow.h",
		"/Users/bgporter/personal/juce/modules/juce_gui_basics/windows/juce_TooltipWindow.cpp",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Package Control.sublime-settings",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Base File.sublime-settings",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_Scumbler.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler",
		"/Users/bgporter/personal/juce/extras/Introjucer/Source/Project/jucer_ProjectContentComponent.h",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Alignment/Base File.sublime-settings",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/bgporter/temp/lister.py",
		"/Users/bgporter/AnL/svn/TrantorClient/Marketing/20121126.txt",
		"/Users/bgporter/personal/tetrakite/scumbler/JuceLibraryCode/modules/juce_audio_basics/juce_audio_basics.mm",
		"/Users/bgporter/personal/juce/docs/JUCE readme.html",
		"/Users/bgporter/personal/juce/docs/gpl.txt",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSetupPage.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSetupPage.h",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSynthPage.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoTabComponent.h",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoTabComponent.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSynthPage.h",
		"/Users/bgporter/personal/juce/modules/juce_audio_devices/juce_audio_devices.h",
		"/Users/bgporter/personal/juce/modules/juce_audio_devices/juce_audio_devices.cpp",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/SublimeBlockCursor/SublimeBlockCursor.py",
		"/Users/bgporter/incoming/spfmba/committee.html",
		"/Users/bgporter/incoming/spfmba/CommitteePeople.txt",
		"/Users/bgporter/incoming/spfmba/CommitteeTable.py",
		"/Users/bgporter/incoming/spfmba/rows.txt",
		"/Users/bgporter/AnL/ArtLogic/CodeReviews/AlDocs/TaskList.txt",
		"/Users/bgporter/personal/juce/README.txt",
		"/Users/bgporter/temp/linenum.py",
		"/Users/bgporter/temp/showLine.py",
		"/Users/bgporter/AnL/svn/TrantorClient/Marketing/20121015.txt",
		"/Users/bgporter/AnL/git/Estimator/docs/dev_guide.xhtml",
		"/Users/bgporter/personal/utilities/mp3/mover/artistTest.py",
		"/Users/bgporter/AnL/tests/Gurrola/Part 1a/main.cpp",
		"/Users/bgporter/AnL/tests/Gurrola/Part 1a/fp32.h",
		"/Users/bgporter/AnL/tests/Gurrola/Part 2/text.h",
		"/Users/bgporter/AnL/tests/Gurrola/Part 2/text.cpp",
		"/Users/bgporter/AnL/tests/Gurrola/Part 2/main.cpp",
		"/Users/bgporter/AnL/tests/Gurrola/Part 1a/fp32.cpp",
		"/Users/bgporter/personal/utilities/mp3/mover/echonest.py",
		"/Users/bgporter/personal/utilities/mp3/mover/mover.py",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge2/ConfigObjects.php",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge2/ConfigReader.php",
		"/Users/bgporter/AnL/ArtLogic/CodeReviews/AlDocs/boiler.txt",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge3/Brokenc.c",
		"/Users/bgporter/AnL/tests/culhane/alpc-solutions/Part1b/index.html",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1A-Info.plist",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1A-Prefix.pch",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1AAppDelegate.h",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1AAppDelegate.mm",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/FixedPointRepresentation.cpp",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/FixedPointRepresentation.h",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/main.m",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Controller.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Buzzword.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/LocalConfig.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Day.py",
		"/Users/bgporter/AnL/temp/discount.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Config.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Default/Global.sublime-settings",
		"/Users/bgporter/temp/methods.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Default/Base File.sublime-settings",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/appengine_config.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/context.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/date.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/help.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/mapper.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/models.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/nav.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/page.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/project.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/pymarkdown.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/settings.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/tag.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/task.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/util.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/wastebokpage.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/wastebook.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Global.sublime-settings",
		"/Users/bgporter/Documents/Kath/worksheet/worksheet.py",
		"/Users/bgporter/temp/temp.html",
		"/Users/bgporter/Documents/Kath/worksheet/test2.html",
		"/Users/bgporter/Documents/Kath/worksheet/worksheet.css"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"outputDebugString",
			"fNowIndex",
			"LoopSizeChanged",
			"SetLoopD",
			"LoopSizeChanged",
			"CalculateSamplesPerPixel",
			"fPendingSamples",
			"min",
			".\n",
			"fDirtyStart",
			"LoopInfo",
			"fPixelData",
			"GetThum",
			"ViewPlugins",
			"//",
			"201",
			"         \n",
			".\n",
			"   \n",
			"    \n",
			"()));\n",
			"();\n",
			"    \n",
			"() ",
			"\n",
			"ConnectToLoop",
			"LoopComponent",
			"getCurrentAudio",
			"IsPl",
			"new TrackComponent",
			"jmax",
			"addChan",
			"jmax",
			"fPluginName",
			"desc",
			"FindPlug",
			"ViewPlugins",
			"addDefaultFormats",
			"extern",
			"gCommandManager",
			"new TrackComponent",
			"AddTrack",
			"TrackComponent",
			"\n",
			"    \n",
			"TODO",
			";\n",
			"AudioDeviceManager",
			"NOTE",
			"         \n",
			");\n",
			";\n",
			".\n",
			"]]",
			"[[",
			"Estim",
			".\n",
			"());\n",
			"align",
			"curvy claire",
			"tryTo",
			"commandManager",
			"showAudioSettings",
			"AudioDe",
			"AudioDeviceManager",
			"AudioProcessorGraph",
			"AudioProcessorPlayer",
			"knownPluginList",
			"formatManager",
			"GraphDocumentComponent",
			"getChosenType",
			"PLuginListCom",
			"knownPlu",
			"/knownPlu",
			"Known",
			"recordedSound",
			"audioCallback",
			"callback",
			"Node",
			"addNode",
			"buildRenderingSequence",
			"RenderingOpSequenceCalculator",
			"createRenderingOpsForNode",
			"AudioGraphRenderingOp",
			"processBl",
			"lastCallbackTime",
			"outputChannelD",
			"setPro",
			"2px",
			"td",
			"\n",
			"addFil",
			"createNewPlugin",
			"createNewPl",
			"commandManager",
			"player",
			"getGraph",
			"graphPlater",
			"setProcessor",
			"player",
			"addFilter",
			"Player",
			"createNodeXml",
			"restoreFromXml",
			"saveD",
			"Audio",
			"ignored",
			"PluginListCom",
			"knownP",
			"knownPluginList",
			"PluginListWin",
			"showPluginList",
			"PluginDirectory",
			"addFil",
			"createNewPl",
			"deviceManager",
			"AudioDeviceManager",
			"key",
			"midi",
			"ignored",
			"Drape",
			"print",
			"HandleRe",
			"print",
			"HandleReq",
			"like",
			"false",
			"input"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			">>",
			"<<",
			"1px",
			"th"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Components/PluginBlockComponent.cpp",
					"settings":
					{
						"buffer_size": 2223,
						"regions":
						{
							"bookmark_a":
							{
								"flags": 144,
								"regions":
								[
									[
										931,
										931
									]
								]
							}
						},
						"selection":
						[
							[
								803,
								803
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 182.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Components/PluginBlockComponent.h",
					"settings":
					{
						"buffer_size": 1306,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 113.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Components/ComponentDefs.h",
					"settings":
					{
						"buffer_size": 687,
						"regions":
						{
						},
						"selection":
						[
							[
								680,
								680
							]
						],
						"settings":
						{
							"is_xml": false,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Components/PluginSlotComponent.h",
					"settings":
					{
						"buffer_size": 2118,
						"regions":
						{
						},
						"selection":
						[
							[
								368,
								368
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Components/PluginSlotComponent.cpp",
					"settings":
					{
						"buffer_size": 5459,
						"regions":
						{
						},
						"selection":
						[
							[
								2393,
								2393
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2076.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "PluginBlock.cpp",
					"settings":
					{
						"buffer_size": 5843,
						"regions":
						{
						},
						"selection":
						[
							[
								2019,
								2025
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1002.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"sc",
				"Scumbler.cpp"
			],
			[
				"fil",
				"FilterGraph.cpp"
			],
			[
				"at",
				"Assembler_test.py"
			],
			[
				"ass",
				"Assembler.py"
			],
			[
				"art",
				"artistTest.py"
			],
			[
				"ec",
				"echonest.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 185.0,
	"status_bar_visible": true
}
