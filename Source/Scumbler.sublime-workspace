{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"getFullPathName"
			],
			[
				"LoadPl",
				"LoadPluginAtIndex"
			],
			[
				"res",
				"Result"
			],
			[
				"Create",
				"CreateNewScumblerAndComponent"
			],
			[
				"ret",
				"retval"
			],
			[
				"Audio",
				"AudioProcessor"
			],
			[
				"Command",
				"CommandIds"
			],
			[
				"fSampleCount",
				"fSampleCountNode"
			],
			[
				"Plugin",
				"PluginSlotComponent"
			],
			[
				"Pl",
				"PluginBlock"
			],
			[
				"conn",
				"ConnectToTrack"
			],
			[
				"Delete",
				"DeleteTrack"
			],
			[
				"current",
				"currentActiveTrack"
			],
			[
				"dest",
				"destChannel"
			],
			[
				"source",
				"sourceChannel"
			],
			[
				"des",
				"destChannel"
			],
			[
				"fPan",
				"fPanRequired"
			],
			[
				"send",
				"sendChangeMessage"
			],
			[
				"SetInput",
				"SetInputGain"
			],
			[
				"kKn",
				"kKnobHeight"
			],
			[
				"kKnob",
				"kKnobWidth"
			],
			[
				"full",
				"fullSlotBg"
			],
			[
				"fPost",
				"fPostColors"
			],
			[
				"fPre",
				"fPreColors"
			],
			[
				"kPl",
				"kPluginSlotHeight"
			],
			[
				"wh",
				"white"
			],
			[
				"fCenter",
				"fCenterLineStopX"
			],
			[
				"effect",
				"effectBlockHeight"
			],
			[
				"setC",
				"setClickingTogglesState"
			],
			[
				"fDirty",
				"fDirtyPixels"
			],
			[
				"Colour",
				"Colours"
			],
			[
				"fDir",
				"fDirtyPixels"
			],
			[
				"fLoo",
				"fLoopSample"
			],
			[
				"cl",
				"Clear"
			],
			[
				"fLoop",
				"fLoopSample"
			],
			[
				"fDi",
				"fDirtyPixels"
			],
			[
				"fPi",
				"fPixelsReturned"
			],
			[
				"Wave",
				"WaveformPoint"
			],
			[
				"fPixel",
				"fPixelData"
			],
			[
				"pixel",
				"pixelVal"
			],
			[
				"fSampl",
				"fSamplesPerPixel"
			],
			[
				"info",
				"infoObj"
			],
			[
				"Get",
				"GetLoopDuration"
			],
			[
				"add",
				"addChangeListener"
			],
			[
				"kIn",
				"kInvalidNode"
			],
			[
				"dB",
				"dbToFloat"
			],
			[
				"buffer",
				"bufferLength"
			],
			[
				"AudioP",
				"AudioProcessorGraph"
			],
			[
				"Plu",
				"PluginEditorWindow"
			],
			[
				"Plug",
				"PluginSlotComponent"
			],
			[
				"GetTrack",
				"GetTrackBounds"
			],
			[
				"fTrack",
				"fTrackCount"
			],
			[
				"remo",
				"removeNode"
			],
			[
				"Inv",
				"kInvalidNode"
			],
			[
				"FInd",
				"FindNodeAfterIndex"
			],
			[
				"FindNode",
				"FindNodeBeforeIndex"
			],
			[
				"Find",
				"FindNodeAfterIndex"
			],
			[
				"begin",
				"beginTest"
			],
			[
				"getNext",
				"getNextCommandTarget"
			],
			[
				"li",
				"lineNum"
			],
			[
				"line",
				"linenum"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Components/ScumblerComponent.cpp",
			"settings":
			{
				"buffer_size": 10771,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Components/TrackComponent.cpp",
			"settings":
			{
				"buffer_size": 17703,
				"line_ending": "Windows"
			}
		},
		{
			"file": "MainWindow.h",
			"settings":
			{
				"buffer_size": 4760,
				"line_ending": "Windows"
			}
		},
		{
			"file": "MainWindow.cpp",
			"settings":
			{
				"buffer_size": 15039,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 50 files for \"*.scumbler\"\n\n0 matches across 0 files\n\n\nSearching 50 files for \"scumbler\"\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Main.cpp:\n   11  #include \"../JuceLibraryCode/JuceHeader.h\"\n   12  #include \"MainWindow.h\"\n   13: #include \"ScumblerDefs.h\"\n   14  \n   15  \n   ..\n   19  \n   20  //==============================================================================\n   21: class ScumblerApplication  : public JUCEApplication\n   22  {\n   23  public:\n   24      //==============================================================================\n   25:     ScumblerApplication()\n   26      {\n   27      }\n   28  \n   29:     ~ScumblerApplication()\n   30      {\n   31      }\n   ..\n   37  \n   38          PropertiesFile::Options options;\n   39:         options.applicationName     = \"Scumbler\";\n   40          options.filenameSuffix      = \"settings\";\n   41          options.osxLibrarySubFolder = \"Preferences\";\n   ..\n   74      const String getApplicationName()\n   75      {\n   76:         return \"Scumbler\";\n   77      }\n   78  \n   ..\n   98  //==============================================================================\n   99  // This macro generates the main() routine that starts the app.\n  100: START_JUCE_APPLICATION(ScumblerApplication)\n  101  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/MainWindow.cpp:\n   12  \n   13  #include \"Commands.h\"\n   14: #include \"Components/ScumblerComponent.h\"\n   15  #include \"PluginListWindow.h\"\n   16  \n   ..\n   20      : DocumentWindow (JUCEApplication::getInstance()->getApplicationName() , Colours::lightgrey\n   21        , DocumentWindow::allButtons)\n   22:     , fScumbler(nullptr)\n   23      , fFilePath(String::empty)\n   24  {\n   ..\n   61  \n   62  #if 0\n   63:   // create and reset the scumbler object now that the audio system is configured.\n   64:   fScumbler = new Scumbler(fDeviceManager, fPluginManager);\n   65:   //fScumbler->Reset();\n   66    \n   67:   // Pass any saved configuration parameters down to the scumbler object.\n   68    int sortOrder = userSettings->getIntValue(\"pluginSortOrder\", (int) KnownPluginList::defaultOrder);\n   69:   fScumbler->SetPluginSortOrder((KnownPluginList::SortMethod) sortOrder);\n   70  \n   71:   // create the scumbler component that owns & operates our user interface.NOTE \n   72    // that because we're about to call 'setContentOwned()' we don't need to retain a pointer \n   73    // to the component here. This window object will take care of its lifespan.\n   74:   ScumblerComponent* c = new ScumblerComponent(fScumbler);\n   75    gCommandManager->registerAllCommandsForTarget(c);\n   76    // set that component as this window's content (and take ownership of the pointer)\n   77    this->setContentOwned(c, true);\n   78  #else\n   79:     this->CreateNewScumblerAndComponent(true);\n   80  #endif\n   81      \n   ..\n  159    settings->saveIfNeeded();\n  160  \n  161:   // !!! notify the scumbler object that the settings have changed\n  162  \n  163  }\n  ...\n  186  void MainAppWindow::New()\n  187  {\n  188:    // !!! Check existing scumbler dirty state first!\n  189:    this->CreateNewScumblerAndComponent(true);\n  190     // reset the file path..\n  191     fFilePath.clear();\n  ...\n  201     if (xml)\n  202     {\n  203:       this->CreateNewScumblerAndComponent(false);\n  204        StringArray errors;\n  205:       fScumbler->LoadXml(xml, errors, 0);\n  206        // !!! display any errors that occurred.\n  207     }\n  ...\n  212     if (fFilePath)\n  213     {\n  214:      ScopedPointer<XmlElement> contents(fScumbler->DumpXml(0));\n  215       //String cwd = File::getCurrentWorkingDirectory().getFullPathName();\n  216       File temp(fFilePath);\n  ...\n  233  \n  234  \n  235: void MainAppWindow::CreateNewScumblerAndComponent(bool addFirstTrack)\n  236  {\n  237:    if (fScumbler)\n  238     {\n  239:       // if there's already a scumbler object in existence, tell it to stop processing\n  240        // so we can get the new one we're about to create connected correctly.\n  241:       fScumbler->StopProcessing();\n  242     }  \n  243:    fScumbler = new Scumbler(fDeviceManager, fPluginManager);\n  244:    // Pass any saved configuration parameters down to the scumbler object.\n  245     PropertiesFile* userSettings = gAppProperties->getUserSettings();\n  246     int sortOrder = userSettings->getIntValue(\"pluginSortOrder\", (int) KnownPluginList::defaultOrder);\n  247:    fScumbler->SetPluginSortOrder((KnownPluginList::SortMethod) sortOrder);\n  248  \n  249     if (addFirstTrack)\n  250     {\n  251:       // Add a track to the scumbler and make it active.\n  252:       fScumbler->AddTrack();    \n  253:       fScumbler->ActivateTrack(0);\n  254     }\n  255  \n  256  \n  257:    // create the scumbler component that owns & operates our user interface.NOTE \n  258     // that because we're about to call 'setContentOwned()' we don't need to retain a pointer \n  259     // to the component here. This window object will take care of its lifespan.\n  260:    ScumblerComponent* c = new ScumblerComponent(fScumbler);\n  261     gCommandManager->registerAllCommandsForTarget(c);\n  262     int w = this->getWidth();\n  ...\n  266     // why 128? When JUCE is creating the main window component, it starts out \n  267     // for some reason at 128x128 dimensions. If we've already been sized explicitly, \n  268:    // restore those dimensions after replacing the ScumblerComponent. !!! At \n  269     // some point, a more deeply considered solution to this problem should be developed.\n  270     if ((w != 128) && (h != 128))\n  ...\n  304        // add the submenu to control how we sort the plugins...\n  305        PopupMenu sortMenu;\n  306:       KnownPluginList::SortMethod order = fScumbler->GetPluginSortOrder();\n  307        sortMenu.addItem(kDefaultOrder, \"List plugins in default order\", true, \n  308          order == KnownPluginList::defaultOrder);\n  ...\n  368              break;\n  369        }\n  370:       fScumbler->SetPluginSortOrder(sortOrder);\n  371        // save this for next time...\n  372        PropertiesFile* settings = gAppProperties->getUserSettings();\n  ...\n  417      {\n  418        result.setInfo(\"New\",\n  419:         \"Create a new (empty) Scumbler file\", category, 0);\n  420        result.defaultKeypresses.add(KeyPress('n', ModifierKeys::commandModifier, 0));\n  421:       result.setActive(!fScumbler->IsPlaying());\n  422  \n  423      }\n  ...\n  427      {\n  428        result.setInfo(\"Open...\",\n  429:         \"Open a Scumbler file\",\n  430          category, 0);\n  431        result.defaultKeypresses.add (KeyPress('o', ModifierKeys::commandModifier, 0));\n  432:       result.setActive(!fScumbler->IsPlaying());\n  433      }\n  434      break;\n  ...\n  437      {\n  438        result.setInfo(\"Save\",\n  439:         \"Save the current Scumbler setup to a file\",\n  440          category, 0);\n  441        result.defaultKeypresses.add(KeyPress('s', ModifierKeys::commandModifier, 0));\n  442:       result.setActive(!fScumbler->IsPlaying());\n  443      }\n  444      break;\n  ...\n  447      {\n  448        result.setInfo(\"Save As...\",\n  449:         \"Save a copy of the current Scumbler setup to a file\",\n  450          category, 0);\n  451          result.defaultKeypresses.add(KeyPress('s',\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/MainWindow.h:\n   14  #include \"../JuceLibraryCode/JuceHeader.h\"\n   15  \n   16: #include \"Scumbler.h\"\n   17  \n   18  extern ApplicationCommandManager* gCommandManager;\n   ..\n   53  \n   54      /**\n   55:      * Clear the scumbler and create a new, empty workspace for us. If the scumbler is\n   56       * currently dirty, we should make sure to give the user an option to save the\n   57       * current contents before nuking them.\n   ..\n   60  \n   61      /**\n   62:      * Open a Scumbler file from disk. If the current scumbler needs to be saved first, \n   63       * we should make sure that can happen.\n   64       */\n   65      void Open();\n   66      /**\n   67:      * Save the current Scumbler to the current file. If there isn't a file open, \n   68       * do SaveAs() instead.\n   69       */\n   ..\n   71  \n   72      /**\n   73:      * Save the current Scumbler into a new file.\n   74       */\n   75      void SaveAs();\n   76  \n   77      /**\n   78:      * Create a new Scumbler for us to use. If there was already one in place, this new\n   79       * one will completely replace it and it will be deleted automatically  .\n   80       * @param addFirstTrack If true, creates a new empty track.\n   81       */\n   82:     void CreateNewScumblerAndComponent(bool addFirstTrack);\n   83  \n   84      /**\n   ..\n  132      /**\n  133       * The Audio devices are owned by the application window. We pass a reference \n  134:      * to this object to the Scumbler object that needs to use it. This lets us \n  135       * keep concerns like configuring & peristing state of the underlying system\n  136       * out of the model for this app.\n  ...\n  149       * app closes.\n  150       */\n  151:     ScopedPointer<Scumbler> fScumbler;\n  152  \n  153      /**\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/PluginBlock.cpp:\n    3  #include \"PluginBlock.h\"\n    4  \n    5: PluginBlock::PluginBlock(PluginConnector* scumbler, NodeId input, NodeId output, size_t size)\n    6: :  fScumbler(scumbler)\n    7  ,  fInput(input)\n    8  ,  fOutput(output)\n    .\n   18     // We should really be checking this, though, and throwing an exception\n   19     // if there's a more serious problem.\n   20:    fScumbler->Connect(input, output);\n   21  }\n   22  \n   ..\n   34           // remove the current node and delete it. We can probably rewrite this in \n   35           // terms of our own DeleteNode() method, yet to be written.\n   36:          fScumbler->RemoveBetween(before.id, currentNode.id, after.id, true);\n   37        }\n   38     }\n   ..\n   65                       MemoryBlock m;\n   66                       m.fromBase64Encoding(state->getAllSubText());\n   67:                      result = fScumbler->SetStateInformationForNode(info.id, m);\n   68                       if (tk::kSuccess != result)\n   69                       {\n   ..\n  109           // there's a real plugin here -- store its description and state.\n  110           PluginDescription pd;\n  111:          tk::Result result = fScumbler->GetPluginDescriptionForNode(slotInfo.id, pd);\n  112           if (tk::kSuccess == result)\n  113           {\n  ...\n  116  \n  117           MemoryBlock m;\n  118:          result = fScumbler->GetStateInformationForNode(slotInfo.id, m);\n  119           if (tk::kSuccess == result)\n  120           {\n  ...\n  146           if (tk::kInvalidNode != before.id && tk::kInvalidNode != after.id)\n  147           {\n  148:             retval = fScumbler->InsertBetween(before.id, plugin.id, after.id);\n  149              if (tk::kSuccess == retval)\n  150              {\n  ...\n  180           if (tk::kInvalidNode != before.id && tk::kInvalidNode != after.id)\n  181           {\n  182:             retval = fScumbler->RemoveBetween(before.id, plugin.id, after.id, deleteNode);\n  183              if (tk::kSuccess == retval)\n  184              {\n  ...\n  217  PluginInfo PluginBlock::LoadPlugin(const PluginDescription& description, String& errorMessage)\n  218  {\n  219:    NodeId newNode = fScumbler->LoadPlugin(description, errorMessage);\n  220     return PluginInfo(newNode, description.name);\n  221  }\n  ...\n  238              // we actually ignore the result here; we need to report failure, so \n  239              // reporting success here would be useless. If this fails, we have other problems.\n  240:             fScumbler->DeleteNode(newPlugin.id);\n  241           }\n  242        }\n  ...\n  252     if (tk::kInvalidNode != plugin.id)\n  253     {\n  254:       retval = fScumbler->GetEditorForNode(plugin.id, useGeneric);\n  255     }\n  256     return retval;\n  ...\n  296  KnownPluginList::SortMethod PluginBlock::GetPluginSortOrder() const\n  297  {\n  298:    return fScumbler->GetPluginSortOrder();\n  299  }\n  300  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/PluginBlock.h:\n   13  /**\n   14    * @struct PluginInfo\n   15:   * We store both the nodeId for a plugin (so we can manipulate it inside the Scumbler),\n   16    * and also the name of it so we can display it in the UI. The PluginBlock seems\n   17    * to be the appropriate place to link these two things. This struct is small and \n   ..\n   57      * or output nodes, just the I/O for this block of plugins.\n   58      * \n   59:     * @param scumbler The scumbler object that owns the filter graph\n   60      * @param input ID of the node that provides input to this block. \n   61      * @param output ID of the node we need to send output from our last plugin\n   62      * @param size Number of nodes that this block can hold. \n   63      */\n   64:    PluginBlock(PluginConnector* scumbler, NodeId input, NodeId output, size_t size);\n   65  \n   66     /**\n   67      * Destroy the plugin block, disconnecting and removing all plugins from the \n   68:     * scumbler object first.\n   69      */\n   70     ~PluginBlock();\n   ..\n  119  \n  120     /**\n  121:     * Load the specified plugin into the Scumbler (but don't yet connect it to anything.) \n  122      * On success, returns a new NodeId to the caller, which can then call InsertNodeAtIndex()\n  123      * to put it where it wants it. Obviously, it's a good idea to call NodeInSlot() \n  ...\n  133      * Convenience function. Does these things:\n  134      *   - checks that the slot at index is free. If so:\n  135:     *   - tells the Scumbler to load the plugin. If that succeeds:\n  136      *   - inserts the resulting node at the requested index, returns Success.\n  137      * @param  index Node to insert a new plugin at. Must be empty.\n  ...\n  143  \n  144     /**\n  145:     * Have the Scumbler create and return an AudioProcessorEditor component for the \n  146      * plugin at the specified index.\n  147      * @param  index Index in this block of the plugin to edit.\n  ...\n  179  \n  180     /**\n  181:     * The scumbler object owning the filter graph.\n  182      */\n  183:    PluginConnector* fScumbler;\n  184  \n  185     /**\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/PluginConnector.h:\n    8  #include \"../JuceLibraryCode/JuceHeader.h\"\n    9  \n   10: #include \"ScumblerDefs.h\"\n   11  \n   12  class PluginConnector\n   ..\n   50       * Insert 'newNode' in the graph inbetween 'before' and 'after'.\n   51       * @param  before  The node that 'newNode' should be inserted after. The \n   52:      *                 special value Scumbler::kInput can be used to connect \n   53       *                 newNode to the input node.\n   54       * @param  newNode id of the node to connect in the middle. It should \n   55       *                 already have been added to the graph with AddProcessor\n   56       * @param  after   The node that 'newNode' should be inserted before. The \n   57:      *                 special value Scumbler::kOutput can be used to connect the \n   58:      *                 newNode to the Scumbler's output.\n   59       * @return         tk::Result\n   60       */\n   ..\n   81  \n   82      /**\n   83:      * Insert the provided AudioProcessor object into the Scumbler's filter \n   84:      * graph.  The Scumbler takes ownership of the object, and it should \n   85       * **not** be deleted elsewhere.\n   86       * @param  p The audio processor.\n   ..\n  101  \n  102     /**\n  103:     * Load the specified plugin into the Scumbler (but don't yet connect it to anything.) \n  104      * On success, returns a new NodeId to the caller, which can then call InsertNodeAtIndex()\n  105      * to put it where it wants it. Obviously, it's a good idea to call NodeInSlot() \n  ...\n  140     /**\n  141      * Fill in a PluginDescription object for the specified node. We use this when \n  142:     * saving a Scumbler to disk.\n  143      * @param  node The NodeId of the plugin we're interested in.\n  144      * @param  desc Empty PluginDescription object to be filled in.   \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.cpp:\n    1  // Copyright (c) 2012 Bg Porter\n    2  \n    3: #include \"Scumbler.h\"\n    4  \n    5  #include <math.h>\n    .\n   15  // If we are compiling unit tests in, we do a fake singleton that's only\n   16  // visible in file scope so the unit test code can have access to the \n   17: // one and only Scumbler object.\n   18  namespace\n   19  {\n   20:    Scumbler* instance = nullptr;\n   21  };\n   22  \n   ..\n   37  \n   38  \n   39: Scumbler::Scumbler(AudioDeviceManager& deviceManager, \n   40                    AudioPluginFormatManager& pluginManager)\n   41  : fDeviceManager(deviceManager)\n   ..\n   54  #ifdef qUnitTests\n   55     //jassert(nullptr == instance);\n   56:    // save the pointer to this scumbler instance as 'the' scumbler instance.\n   57     instance = this;\n   58  #endif\n   ..\n   62  }\n   63  \n   64: Scumbler::~Scumbler()\n   65  {\n   66     this->removeAllChangeListeners();\n   67     this->StopProcessing();\n   68     fGraph.clear();\n   69:    std::cout << \"Exiting Scumbler dtor\" << std::endl;\n   70  }\n   71  \n   72  \n   73: tk::Result Scumbler::StartProcessing()\n   74  {\n   75     tk::Result retval = tk::kAlreadyStarted;\n   ..\n   85  \n   86  \n   87: tk::Result Scumbler::StopProcessing()\n   88  {\n   89     tk::Result retval = tk::kAlreadyStopped;\n   ..\n  100  \n  101  \n  102: void Scumbler::LoadXml(XmlElement* e, StringArray& errors, int formatVersion)\n  103  {\n  104:    if (e->hasTagName(tag::kScumbler))\n  105     {\n  106        this->Reset(false);\n  107:       // retrieve the scumbler values, but don't do anything with them yet.\n  108        int formatVersion = e->getIntAttribute(tag::kFileFormat);\n  109        int activeTrackIndex = e->getIntAttribute(tag::kActiveTrackIndex, 0);\n  ...\n  132  \n  133  \n  134: XmlElement* Scumbler::DumpXml(int formatVersion) const\n  135  {\n  136:    XmlElement* node = new XmlElement(tag::kScumbler);\n  137     node->setAttribute(tag::kFileFormat, formatVersion);\n  138     node->setAttribute(tag::kActiveTrackIndex, fActiveTrackIndex);\n  ...\n  149  }\n  150  \n  151: void Scumbler::changeListenerCallback(ChangeBroadcaster* source)\n  152  {\n  153:    std::cout << \"Scumbler::changeListenerCallback()\" << std::endl;\n  154     if (source == fSampleCount)\n  155     {\n  ...\n  180  \n  181  \n  182: void Scumbler::SetPluginSortOrder(KnownPluginList::SortMethod sort)\n  183  {\n  184     fPluginSort = sort;\n  185  }\n  186  \n  187: KnownPluginList::SortMethod Scumbler::GetPluginSortOrder() const\n  188  {\n  189     return fPluginSort;\n  ...\n  191  \n  192  #ifdef qUnitTests \n  193: Scumbler* Scumbler::GetInstance()\n  194  {\n  195     return instance;\n  ...\n  197  #endif\n  198  \n  199: void Scumbler::TogglePlay()\n  200  {\n  201     if (fPlaying)\n  ...\n  207        this->Play();\n  208     }\n  209:    std::cout << \"Scumbler::TogglePlay->sendChangeMessage\" << std::endl;\n  210     this->sendChangeMessage();\n  211  \n  212  }\n  213  \n  214: bool Scumbler::IsPlaying() const\n  215  {\n  216     return fPlaying;\n  217  }\n  218  \n  219: void Scumbler::Reset(bool addFirstTrack)\n  220  {\n  221     this->Pause();\n  ...\n  270     }\n  271     // let anyone listening tk::know that we've changed.\n  272:    std::cout << \"Scumbler::Reset->sendChangeMessage\" << std::endl;\n  273     this->sendChangeMessage();\n  274  \n  275  }\n  276  \n  277: void Scumbler::SetOutputVolume(float volumeInDb)\n  278  {\n  279     if (volumeInDb != fOutputVolume)\n  ...\n  287  \n  288        // update our observers.\n  289:       std::cout << \"Scumbler::SetOutputVolume->sendChangeMessage\" << std::endl;\n  290        this->sendChangeMessage();\n  291     }\n  292  }\n  293  \n  294: float Scumbler::GetOutputVolume() const\n  295  {\n  296     return fOutputVolume;\n  297  }\n  298  \n  299: uint64 Scumbler::GetSampleCount() const\n  300  {\n  301     return fSampleCount->GetSampleCount();\n  302  }\n  303  \n  304: tk::Result Scumbler::Connect(NodeId source, NodeId dest)\n  305  {\n  306     return this->HandleConnection(source, dest, true);\n  307  }\n  308  \n  309: tk::Result Scumbler::Disconnect(NodeId source, NodeId dest)\n  310  {\n  311     return this->HandleConnection(source, dest, false);\n  ...\n  313  \n  314  \n  315: tk::Result Scumbler::InsertBetween(NodeId before, NodeId newNode, NodeId after, bool disconnect)\n  316  {\n  317     tk::Result retval = tk::kFailure;\n  ...\n  350  \n  351  \n  352: tk::Result Scumbler::RemoveBetween(NodeId before, NodeId nodeToRemove, \n  353     NodeId after, bool deleteNode, bool reconnect)\n  354  {\n  ...\n  400  \n  401  \n  402: void Scumbler::Play()\n  403  {\n  404     if (!fPlaying)\n  ...\n  409  }\n  410  \n  411: void Scumbler::Pause()\n  412  {\n  413     if (fPlaying)\n  ...\n  419  \n  420  \n  421: int Scumbler::GetNumTracks() const\n  422  {\n  423     return fTracks.size();\n  424  }\n  425  \n  426: tk::Result Scumbler::AddTrack(const String& name)\n  427  {\n  428     fTracks.add(new Track(this, kPreEffects, kPostEffects, name));\n  429:    std::cout << \"Scumbler::AddTrack->sendChangeMessage\" << std::endl;\n  430     this->sendChangeMessage();\n  431     return tk::kSuccess;\n  ...\n  433  \n  434  \n  435: tk::Result Scumbler::DeleteTrack(int index)\n  436  {\n  437     tk::Result retval = tk::kFailure;\n  ...\n  440        fTracks.remove(index);\n  441        retval = tk::kSuccess;\n  442:    std::cout << \"Scumbler::DeleteTrack->sendChangeMessage\" << std::endl;\n  443        this->sendChangeMessage();\n  444     }\n  ...\n  447  \n  448  \n  449: tk::Result Scumbler::ActivateTrack(int index)\n  450  {\n  451     tk::Result retval = tk::kFailure;\n  ...\n  457           Track* newActive = this->GetTrack(index);\n  458           newActive->SetActive(true);\n  459:    std::cout << \"Scumbler::ActivateTrack->sendChangeMessage\" << std::endl;\n  460           this->sendChangeMessage();\n  461        }\n  ...\n  464  }\n  465  \n  466: tk::Result Scumbler::ActivateTrack(Track* track)\n  467  {\n  468     tk::Result retval = tk::kFailure;\n  ...\n  471  }\n  472  \n  473: tk::Result Scumbler::ActivateNextTrack()\n  474  {\n  475     tk::Result retval = tk::kFailure;\n  ...\n  491  \n  492  \n  493: tk::Result Scumbler::ActivatePreviousTrack()\n  494  {\n  495     tk::Result retval = tk::kFailure;\n  ...\n  510  }\n  511  \n  512: tk::Result Scumbler::TrackIsActivating(Track* trackBeingActivated)\n  513  {\n  514     tk::Result retval = tk::kSuccess;\n  ...\n  525  }\n  526  \n  527: int Scumbler::GetActiveTrackIndex() const\n  528  {\n  529     return fActiveTrackIndex;\n  ...\n  531  \n  532  \n  533: tk::Result Scumbler::SoloTrack(Track* trackToSolo)\n  534  {\n  535     fSoloTrack = trackToSolo;\n  ...\n  537  }\n  538  \n  539: Track* Scumbler::GetSoloTrack() const\n  540  {\n  541     return fSoloTrack;\n  542  }\n  543  \n  544: tk::Result Scumbler::ResetAllTracks()\n  545  {\n  546     for (int i = 0; i < this->GetNumTracks(); ++i)\n  ...\n  555  }\n  556  \n  557: tk::Result Scumbler::SeekAllTracksAbsolute(int loopPos)\n  558  {\n  559     for (int i = 0; i < this->GetNumTracks(); ++i)\n  ...\n  567  }\n  568  \n  569: tk::Result Scumbler::MoveTrack(int fromIndex, int toIndex)\n  570  {\n  571     tk::Result retval = tk::kFailure;\n  ...\n  582        fTracks.move(fromIndex, toIndex);\n  583        retval = tk::kSuccess;\n  584:    std::cout << \"Scumbler::MoveTrack->sendChangeMessage\" << std::endl;\n  585        this->sendChangeMessage();\n  586     }\n  ...\n  590  \n  591  \n  592: Track* Scumbler::GetTrack(int index) const\n  593  {\n  594     // if index is out of range (or if the array is legitimately holding a \n  ...\n  598  \n  599  \n  600: tk::Result Scumbler::HandleConnection(NodeId source, NodeId dest, bool connecting)\n  601  {\n  602     tk::Result retval = tk::kFailure;\n  ...\n  679  }\n  680  \n  681: NodeId Scumbler::AddProcessor(AudioProcessor* p)\n  682  {\n  683     AudioProcessorGraph::Node* node;\n  ...\n  686  }\n  687  \n  688: tk::Result Scumbler::DeleteNode(NodeId node)\n  689  {\n  690     tk::Result retval = tk::kFailure;\n  ...\n  697  \n  698  \n  699: NodeId Scumbler::LoadPlugin(const PluginDescription& description, String& errorMessage)\n  700  {\n  701     NodeId retval = tk::kInvalidNode;\n  ...\n  711  \n  712  \n  713: AudioProcessorEditor* Scumbler::GetEditorForNode(NodeId node, bool useGeneric)\n  714  {\n  715     AudioProcessorEditor* retval = nullptr;\n  ...\n  736  \n  737  \n  738: tk::Result Scumbler::GetStateInformationForNode(NodeId nodeId, MemoryBlock& m)\n  739  {\n  740     tk::Result retval = tk::kFailure;\n  ...\n  752  }\n  753  \n  754: tk::Result Scumbler::SetStateInformationForNode(NodeId nodeId, MemoryBlock& m)\n  755  {\n  756     tk::Result retval = tk::kFailure;\n  ...\n  769  \n  770  \n  771: tk::Result Scumbler::GetPluginDescriptionForNode(NodeId nodeId, PluginDescription& desc)\n  772  {\n  773     tk::Result retval = tk::kFailure;\n  ...\n  786  \n  787  \n  788: NodeId Scumbler::HandleSpecialNode(NodeId node)\n  789  {\n  790     NodeId retval = node;\n  ...\n  807  /// KEEP THIS SECTION AT THE END OF THE FILE.\n  808  #ifdef qUnitTests\n  809: #include \"Test/test_Scumbler.cpp\"\n  810  #endif\n  811  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.h:\n    3  // !!! License\n    4  \n    5: #ifndef h_Scumbler\n    6: #define h_Scumbler\n    7  \n    8  #include \"../JuceLibraryCode/JuceHeader.h\"\n    .\n   33  \n   34  /**\n   35:  * \\class Scumbler\n   36:  * \\brief The 'model' class for our MVC architecture in the Scumbler app\n   37   *\n   38   * This class owns/manages all of\n   ..\n   42   * - writing output to file, etc.\n   43   */\n   44: class Scumbler  : public ChangeBroadcaster\n   45                  , public ChangeListener\n   46                  , public PluginConnector\n   ..\n   49  public:\n   50  #ifdef qUnitTests\n   51:   friend class ScumblerTest;\n   52  #endif    \n   53    // The Track class needs to be able to access the input and output nodes.\n   ..\n   62      *     owned elsewhere in the application. \n   63      */\n   64:   Scumbler(AudioDeviceManager& deviceManager, AudioPluginFormatManager& pluginManager);\n   65  \n   66     /**\n   67      * dtor.\n   68      */\n   69:    ~Scumbler();\n   70  \n   71  \n   72  \n   73     /**\n   74:     * Connect this scumbler to the playback mechanism and start handling audio.\n   75      * @return kSuccess or kAlreadyStarted.\n   76      */\n   ..\n   78  \n   79     /**\n   80:     * Disconnect this scumbler from the audio playback mechanism and stop processing audio.\n   81      * @return kSuccess or kAlreadyStopped.\n   82      */\n   ..\n  108  \n  109     /**\n  110:     * Switches the scumbler object between the play and pause states.\n  111      */\n  112      void TogglePlay();\n  113     /**\n  114:     *  returns bool indicating whether the Scumbler is processing \n  115      *   audio right now.\n  116      */\n  ...\n  119     /**\n  120      * Do a complete reset on the processor graph. \n  121:     * @param addFirstTrack Should we add a single empty track to the scumbler so \n  122      *                      it can start working right away? \n  123      *\n  124      * After removing (and therefore deleting) all of the processor nodes that \n  125      * were added to the graph, creates new input & output processors and adds them.\n  126:     * **NOTE** that the Scumbler object should be reset after creation, after the \n  127      * Audio device manager is initialized.\n  128      */\n  ...\n  130  \n  131      /**\n  132:      * Set the scumbler's master output volume. \n  133       * @param volumeInDb dB, probably -96..0\n  134       */\n  ...\n  173       * Insert 'newNode' in the graph in between 'before' and 'after'.\n  174       * @param  before  The node that 'newNode' should be inserted after. The \n  175:      *                 special value Scumbler::kInput can be used to connect \n  176       *                 newNode to the input node.\n  177       * @param  newNode id of the node to connect in the middle. It should \n  178       *                 already have been added to the graph with AddProcessor\n  179       * @param  after   The node that 'newNode' should be inserted before. The \n  180:      *                 special value Scumbler::kOutput can be used to connect the \n  181:      *                 newNode to the Scumbler's output.\n  182       * @param disconnect Do we need to disconnect before+after before inserting newNode?\n  183       *                   This is useful when we're adding a track -- the input and output nodes\n  ...\n  212  \n  213      /**\n  214:      * Insert the provided AudioProcessor object into the Scumbler's filter \n  215:      * graph.  The Scumbler takes ownership of the object, and it should \n  216       * **not** be deleted elsewhere.\n  217       * @param  p The audio processor.\n  ...\n  232  \n  233     /**\n  234:     * Load the specified plugin into the Scumbler (but don't yet connect it to anything.) \n  235      * On success, returns a new NodeId to the caller, which can then call InsertNodeAtIndex()\n  236      * to put it where it wants it. Obviously, it's a good idea to call NodeInSlot() \n  ...\n  266     /**\n  267      * Fill in a PluginDescription object for the specified node. We use this when \n  268:     * saving a Scumbler to disk.\n  269      * @param  node The NodeId of the plugin we're interested in.\n  270      * @param  desc Empty PluginDescription object to be filled in.   \n  ...\n  281      \n  282      /**\n  283:      * Returns the number of tracks that are currently in the Scumbler. \n  284       * @return [description]\n  285       */\n  ...\n  295  \n  296      /**\n  297:      * Remove a track from the scumbler and clean everything up.\n  298       * @param  index index of the track to remove\n  299       * @return       Success/failure.\n  ...\n  332      /**\n  333       * Called from inside the Track::SetActive() implementation. The track object that's \n  334:      * being activated lets the Scumbler know that this is happening. The Scumbler \n  335       * then looks for the current active track and deactivates it, updating the index of \n  336       * the currently active track\n  ...\n  350      /**\n  351       * Set a track as being soloed. Pass in nullptr to have no tracks soloed. Individual \n  352:      * tracks can process their output by calling scumbler->GetSoloTrack(). If that \n  353       * returns nullptr, no tracks are soloed, and they can output normally. If the return \n  354       * value is anything other than nullptr, they only output if \n  355:      * this == scumbler->GetSoloTrack(). **NOTE** that we don't check that the pointer passed \n  356       * in is actually a Track object that we own. We assume that calling code is sane.\n  357       * @param  trackToSolo pointer to the track that should be soloed, or nullptr to clear.\n  ...\n  368  \n  369      /**\n  370:      * Reset the loop buffers of all tracks that the scumbler owns, clearing them, and \n  371       * putting all of their loop pointers at the beginning.\n  372       * @return success/fail.\n  ...\n  391      tk::Result MoveTrack(int fromIndex, int toIndex);\n  392      /**\n  393:      * Get a pointer to a specific track object that's owned by the Scumbler.\n  394       * @param  index 0-based index of the track to retrieve\n  395       * @return       pointer, nullptr if there's not a Track at that index.\n  ...\n  417  #ifdef qUnitTests\n  418    /**\n  419:    * Get a pointer to the one and only scumbler object. Only used for unit tests.\n  420:    * @return pointer to the Scumbler.\n  421     */\n  422:   static Scumbler* GetInstance();\n  423  #endif\n  424  \n  ...\n  458  \n  459    /**\n  460:    * Use this to convert one of the special enum values `Scumbler::kInput` or \n  461:    * `Scumbler::kOutput` into the actual node ids that \n  462     * @param  node value that may either be a real node id (< 0xfffffffe) or one of the\n  463:    *              special values for the Scumbler's pre-existing in/out nodes.\n  464     * @return      an actual node id (possibly the same value that was passed in.)\n  465     */\n  ...\n  467  \n  468  private:\n  469:    JUCE_DECLARE_NON_COPYABLE(Scumbler);\n  470  \n  471    enum\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.sublime-project:\n    4  		{\n    5  			\"path\": \".\",\n    6:          \"file_exclude_patterns\" : [\"*.sublime-workspace\", \"Scumbler.jucer\"]\n    7           \n    8  		}\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/ScumblerDefs.h:\n    3  // !!! License\n    4  \n    5: #ifndef h_ScumblerDefs\n    6: #define h_ScumblerDefs\n    7  \n    8  // Later, we can set this to conditionally compile in only on debug \n    .\n   90  \n   91  /**\n   92:  * Namespace to hold the string literals that we use when serializing Scumbler\n   93   * objects to XML. \n   94   */\n   ..\n  112     const String kPostBlock(\"post\");\n  113     const String kPreBlock(\"pre\");\n  114:    const String kScumbler(\"scumbler\");\n  115     const String kSlot(\"slot\");\n  116     const String kSlots(\"slots\");\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Track.cpp:\n   16  \n   17  \n   18: Track::Track(Scumbler* owner, int preFxCount, int postFxCount, const String& name)\n   19: :  fScumbler(owner)\n   20  ,  fDeleteMe(false)\n   21  ,  fName(name)\n   ..\n   35  ,  fOutputVolume(0.0)\n   36  {\n   37:    // we need the input and output nodes that the Scumbler controls.\n   38:    NodeId input = fScumbler->HandleSpecialNode(tk::kInput);\n   39:    NodeId output = fScumbler->HandleSpecialNode(tk::kOutput);\n   40  \n   41     // create an insert the input processor \n   ..\n   43     this->SetInputGain(fInputGain);\n   44     this->SetInputPan(fPan);\n   45:    fInputId = fScumbler->AddProcessor(fInputProcessor);\n   46  \n   47     bool disconnectInputAndOutput = (0 == Track::sTrackCount++);\n   48  \n   49:    fScumbler->InsertBetween(input, fInputId, output, disconnectInputAndOutput);\n   50  \n   51  \n   52     // create and insert the gain processor.\n   53     fOutputGain = new GainProcessor(this, 2);\n   54:    fVolumeId = fScumbler->AddProcessor(fOutputGain);\n   55:    fScumbler->InsertBetween(fInputId, fVolumeId, output);\n   56  \n   57     // create & insert the loop processor\n   58     fLoop = new LoopProcessor(this, 2);\n   59:    fLoopId = fScumbler->AddProcessor(fLoop);\n   60:    fScumbler->InsertBetween(fInputId, fLoopId, fVolumeId);\n   61  \n   62  \n   63     // create the plugin blocks and hook them in.\n   64:    fPreEffects = new PluginBlock(fScumbler, fInputId, fLoopId, fPreEffectCount);\n   65:    fPostEffects = new PluginBlock(fScumbler, fLoopId, fVolumeId, fPostEffectCount);\n   66  \n   67:    this->addChangeListener(fScumbler);\n   68  \n   69  \n   ..\n   76     fPreEffects = nullptr;\n   77     fPostEffects = nullptr;\n   78:    NodeId input = fScumbler->HandleSpecialNode(tk::kInput);\n   79:    NodeId output = fScumbler->HandleSpecialNode(tk::kOutput);\n   80  \n   81     \n   82  \n   83     // remove the loop & delete it\n   84:    fScumbler->RemoveBetween(fInputId, fLoopId, fVolumeId, true);\n   85     // remove the output gain node & delete it.\n   86:    fScumbler->RemoveBetween(fInputId, fVolumeId, output, true);\n   87     // remove the input processor & delete it.\n   88      \n   89     bool reconnectInputAndOutput = (0 == --Track::sTrackCount);\n   90      \n   91:    fScumbler->RemoveBetween(input, fInputId, output, true, reconnectInputAndOutput);\n   92  }\n   93  \n   ..\n  105        if (isSoloed)\n  106        {\n  107:          fScumbler->SoloTrack(this);\n  108        }\n  109        int channels = e->getIntAttribute(tag::kChannels, tk::kStereo);\n  ...\n  162     node->setAttribute(tag::kName, fName);\n  163     node->setAttribute(tag::kMuted, fMuted);\n  164:    node->setAttribute(tag::kSoloed, (this == fScumbler->GetSoloTrack()));\n  165     //node->setAttribute(\"active\", this->IsActive());\n  166     node->setAttribute(tag::kInputGain, fInputGain);\n  ...\n  202  bool Track::IsPlaying() const\n  203  {\n  204:    return fPlaying && fScumbler->IsPlaying();\n  205  }\n  206  \n  ...\n  210     ScopedLock sl(fMutex);\n  211     Track* track = soloed ? this : nullptr; \n  212:    return fScumbler->SoloTrack(track);\n  213     std::cout << \"Track::Solo->sendChangeMessage\" << std::endl;\n  214     this->sendChangeMessage();\n  ...\n  219     ScopedLock sl(fMutex);\n  220     Track::SoloState retval = Track::kNoTracksSoloed;\n  221:    Track* soloTrack = fScumbler->GetSoloTrack();\n  222     if (soloTrack)\n  223     {\n  ...\n  258     if (isActive)\n  259     {\n  260:       fScumbler->TrackIsActivating(this);\n  261     }\n  262     return tk::kSuccess;\n  ...\n  394  bool Track::CanBeDeleted() const\n  395  {\n  396:    return fScumbler->GetNumTracks() > 1;\n  397  }\n  398  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Track.h:\n   13  #include \"Processors/Loop.h\"\n   14  #include \"Processors/Passthrough.h\"\n   15: #include \"Scumbler.h\"\n   16  #include \"XmlPersistent.h\"\n   17  \n   ..\n   24      * \\brief Simple constructor; creates an empty track object.\n   25      *\n   26:     * We pass in a (non-const) reference to the Scumbler object that owns us. \n   27      * A reference both to eliminate the temptation to delete the pointer and \n   28:     * because a track object doesn't make sense absent a Scumbler. \n   29      */\n   30:    Track(Scumbler* owner, int preFxCount, int postFxCount, const String& name=String::empty);\n   31  \n   32     /**\n   ..\n   72  \n   73     /**\n   74:     * Set this track as soloed in the Scumbler.\n   75      * @param soloed -- are we turning the solo on or off? Note that if another\n   76      *               track get soloed, this happens automatically.\n   ..\n  243     /**\n  244      * When the user deletes a track with the UI, we need to tell the \n  245:     * Scumbler that owns us asynchronously to delete us. When we notify\n  246      * it that we want to be deleted, it checks each track to see which \n  247      * one wants to go away and deletes it.\n  ...\n  251  \n  252     /**\n  253:     * Sets the track into a state where the Scumbler can tell that \n  254      * it should be deleted.\n  255      */\n  ...\n  257  \n  258     /**\n  259:     * Returns true if there's more than one track in the scumbler, otherwise\n  260      * false.\n  261      * @return bool.\n  ...\n  271     \n  272     /**\n  273:     * The scumbler object that owns us. We do not own this pointer, so \n  274      * don't delete it.\n  275      */\n  276:    Scumbler* fScumbler;\n  277  \n  278     /**\n  279:     * Set to true when this track wants the Scumbler to delete it.\n  280      */\n  281     bool fDeleteMe;\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/LoopComponent.cpp:\n    3  #include \"LoopComponent.h\"\n    4  #include \"ComponentDefs.h\"\n    5: #include \"Scumbler.h\"\n    6  \n    7  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginSlotComponent.cpp:\n  160           {\n  161              String errorMsg;\n  162:             // pass this plugin description down toward the Scumbler object, \n  163              // which will:\n  164              // - Load it\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ScumblerComponent.cpp:\n   23  //[/Headers]\n   24  \n   25: #include \"ScumblerComponent.h\"\n   26  \n   27  \n   ..\n   31  \n   32  //==============================================================================\n   33: ScumblerComponent::ScumblerComponent (Scumbler* scumbler)\n   34:     : Component (\"The Scumbler\")\n   35:     , fScumbler(scumbler)\n   36      , fTransport(nullptr)\n   37  {\n   ..\n   44      //[Constructor] You can add your own custom stuff here..\n   45          // adding track(s)\n   46:     for (int i = 0; i < fScumbler->GetNumTracks(); ++i)\n   47      {\n   48:       TrackComponent* tc = new TrackComponent(fScumbler->GetTrack(i));\n   49        fTracks.add(tc);\n   50        this->addAndMakeVisible(tc);\n   51      }\n   52  \n   53:     fTransport = new TransportComponent(fScumbler);\n   54      this->addAndMakeVisible(fTransport);\n   55  \n   ..\n   58  \n   59  \n   60:     // subscribe to change notifications coming from the scumbler object.\n   61:     fScumbler->addChangeListener(this);\n   62  \n   63      this->setWantsKeyboardFocus(true);\n   ..\n   66  }\n   67  \n   68: ScumblerComponent::~ScumblerComponent()\n   69  {\n   70      //[Destructor_pre]. You can add your own custom destruction code here..\n   ..\n   78  \n   79  //==============================================================================\n   80: void ScumblerComponent::paint (Graphics& g)\n   81  {\n   82      //[UserPrePaint] Add your own custom painting code here..\n   ..\n   89  }\n   90  \n   91: void ScumblerComponent::resized()\n   92  {\n   93      //[UserResized] Add your own custom resize handling here..\n   ..\n  103  }\n  104  \n  105: void ScumblerComponent::buttonClicked (Button* buttonThatWasClicked)\n  106  {\n  107      //[UserbuttonClicked_Pre]\n  ...\n  116  //[MiscUserCode] You can add your own definitions of your custom methods or any other code here...\n  117  \n  118: ApplicationCommandTarget* ScumblerComponent::getNextCommandTarget()\n  119  {\n  120    return this->findFirstTargetParentComponent();\n  ...\n  122  }\n  123  \n  124: void ScumblerComponent::getAllCommands(Array<CommandID>& commands)\n  125  {\n  126    const CommandID ids[] = {\n  ...\n  143  }\n  144  \n  145: void ScumblerComponent::getCommandInfo(CommandID commandID, ApplicationCommandInfo& result)\n  146  {\n  147    String category = \"General\";\n  ...\n  152      {\n  153        result.setInfo(\"New\",\n  154:         \"Create a new (empty) Scumbler file\", category, 0);\n  155        result.defaultKeypresses.add(KeyPress('n', ModifierKeys::commandModifier, 0));\n  156  \n  ...\n  161      {\n  162        result.setInfo(\"Open...\",\n  163:         \"Open a Scumbler file\",\n  164          category, 0);\n  165          result.defaultKeypresses.add (KeyPress('o', ModifierKeys::commandModifier, 0));\n  ...\n  171      {\n  172        result.setInfo(\"Save\",\n  173:         \"Save the current Scumbler setup to a file\",\n  174          category, 0);\n  175          result.defaultKeypresses.add(KeyPress('s', ModifierKeys::commandModifier, 0));\n  ...\n  180      {\n  181        result.setInfo(\"Save As...\",\n  182:         \"Save a copy of the current Scumbler setup to a file\",\n  183          category, 0);\n  184          result.defaultKeypresses.add(KeyPress('s',\n  ...\n  189      case CommandIds::kPlay:\n  190      {\n  191:       if (fScumbler->IsPlaying())\n  192        {\n  193          result.setInfo(\"Pause\", \"Pause audio playback\", category, 0);\n  ...\n  203      case CommandIds::kAddTrack:\n  204      {\n  205:       result.setInfo(\"Add Track\", \"Add a new audio track to the scumbler\",\n  206          \"Audio\", 0);\n  207        result.defaultKeypresses.add(KeyPress('a', ModifierKeys::commandModifier, 0));\n  ...\n  224  }\n  225  \n  226: bool ScumblerComponent::perform(const InvocationInfo& info)\n  227  {\n  228    bool retval = true;\n  ...\n  253      case CommandIds::kPlay:\n  254      {\n  255:       fScumbler->TogglePlay();\n  256        // tell the command manager something has changed. This will make it\n  257        // re-query us with getCommandInfo() and set the menu text to display either\n  ...\n  265        // Unsubscribe this component from change notifications so we don't go\n  266        // crazy when the tests are running\n  267:       fScumbler->removeChangeListener(this);\n  268        UnitTestRunner runner;\n  269        // run all tests even if there are failures.\n  ...\n  271        runner.runAllTests();\n  272        // hook us back up to the notifications.\n  273:       fScumbler->addChangeListener(this);\n  274  #endif\n  275      }\n  ...\n  281  }\n  282  \n  283: void ScumblerComponent::changeListenerCallback(ChangeBroadcaster* source)\n  284  {\n  285:   std::cout << \"ScumblerComponent::changeListenerCallback\" << std::endl;\n  286:   if (source == fScumbler)\n  287    {\n  288      // if the number of tracks has changed, we need to refresh things.\n  289:     int trackCount = fScumbler->GetNumTracks();\n  290      int trackDelta = trackCount - fTracks.size();\n  291      if (trackDelta != 0)\n  ...\n  330      {\n  331        TrackComponent* tc = fTracks.getUnchecked(i);\n  332:       Track* track = fScumbler->GetTrack(i);\n  333        tc->ConnectToTrack(track);\n  334        this->SetTrackBounds(i, tc);\n  ...\n  340  }\n  341  \n  342: bool ScumblerComponent::keyPressed(const KeyPress& key)\n  343  {\n  344     bool retval = false;\n  ...\n  348        if (mod.isShiftDown())\n  349        {\n  350:          fScumbler->ActivatePreviousTrack();\n  351        }\n  352        else\n  353        {\n  354:          fScumbler->ActivateNextTrack();\n  355        }\n  356        retval = true;\n  ...\n  363  }\n  364  \n  365: void ScumblerComponent::SetTrackBounds(int index, TrackComponent* tc)\n  366  {\n  367    int trackCount = fTracks.size();\n  ...\n  390  BEGIN_JUCER_METADATA\n  391  \n  392: <JUCER_COMPONENT documentType=\"Component\" className=\"ScumblerComponent\" componentName=\"The Scumbler\"\n  393                   parentClasses=\"public Component, public ApplicationCommandTarget, public ChangeListener\"\n  394:                  constructorParams=\"Scumbler* scumbler\" variableInitialisers=\"fScumbler(scumbler)\"\n  395                   snapPixels=\"8\" snapActive=\"1\" snapShown=\"1\" overlayOpacity=\"0.330000013\"\n  396                   fixedSize=\"0\" initialWidth=\"600\" initialHeight=\"400\">\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ScumblerComponent.h:\n   20  */\n   21  \n   22: #ifndef __JUCER_HEADER_SCUMBLERCOMPONENT_SCUMBLERCOMPONENT_A102A7FF__\n   23: #define __JUCER_HEADER_SCUMBLERCOMPONENT_SCUMBLERCOMPONENT_A102A7FF__\n   24  \n   25  //[Headers]     -- You can add your own extra header files here --\n   26  \n   27  \n   28: #include \"../Scumbler.h\"\n   29  \n   30  #include \"../Commands.h\"\n   ..\n   40  /**\n   41                                                                      //[Comments]\n   42:   @class ScumblerComponent\n   43  \n   44:   We use a MVC design for the app here. The ScumblerComponent acts as the model\n   45:   and the view, while the Scumbler itself functions as the model.\n   46                                                                      //[/Comments]\n   47  */\n   48: class ScumblerComponent  : public Component,\n   49                             public ApplicationCommandTarget,\n   50                             public ChangeListener,\n   ..\n   53  public:\n   54      //==============================================================================\n   55:     ScumblerComponent (Scumbler* scumbler);\n   56:     ~ScumblerComponent();\n   57  \n   58      //==============================================================================\n   59      //[UserMethods]     -- You can add your own custom methods in this section.\n   60      /**\n   61:      * Add a new track to the scumbler object.\n   62       * @return result code indicating success or reason for failure.\n   63       */\n   ..\n  106  private:\n  107      //[UserVariables]   -- You can add your own custom variables in this section.\n  108:     Scumbler* fScumbler;\n  109      OwnedArray<TrackComponent>  fTracks;\n  110      TransportComponent* fTransport;\n  ...\n  116  \n  117      //==============================================================================\n  118:     JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ScumblerComponent);\n  119  };\n  120  \n  121  \n  122: #endif   // __JUCER_HEADER_SCUMBLERCOMPONENT_SCUMBLERCOMPONENT_A102A7FF__\n  123  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TrackComponent.cpp:\n  538  \n  539  <JUCER_COMPONENT documentType=\"Component\" className=\"TrackComponent\" componentName=\"\"\n  540:                  parentClasses=\"public Component\" constructorParams=\"Scumbler* owner\"\n  541:                  variableInitialisers=\"fScumbler(owner)\" snapPixels=\"8\" snapActive=\"1\"\n  542                   snapShown=\"1\" overlayOpacity=\"0.330000013\" fixedSize=\"0\" initialWidth=\"600\"\n  543                   initialHeight=\"80\">\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TrackComponent.h:\n  106  \n  107      /**\n  108:      * Set the Track object inside the Scumbler that this component will be representing \n  109       * on screen. \n  110       * @param track A pointer to the track object we should use. Passing in a null pointer \n  ...\n  115  \n  116      /**\n  117:      * Returns a pointer to the track object within the Scumbler that's being represented \n  118       * on screen by this component (and its children). Note that this may change at runtime,\n  119       * so it's important for child components to *not* cache this pointer.       \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TransportComponent.cpp:\n    3  #include \"TransportComponent.h\"\n    4  \n    5: #include \"Scumbler.h\"\n    6  \n    7  \n    8: TransportComponent::TransportComponent(Scumbler* scumbler)\n    9  :  Component(\"TransportComponent\")\n   10: ,  fScumbler(scumbler)\n   11  ,  fAddTrackButton(nullptr)\n   12  ,  fPlayButton(nullptr)\n   ..\n   55     this->setSize(600, 50);\n   56  \n   57:    fScumbler->addChangeListener(this);\n   58  \n   59  }\n   ..\n   70     g.drawRect(0, 0, this->getWidth(), this->getHeight());\n   71  #endif  \n   72:    bool playing = fScumbler->IsPlaying();\n   73     fPlayButton->setButtonText(playing ? \"pause\" : \"play\");\n   74     fResetButton->setEnabled(!playing);\n   75:    fOutputVolume->setValue(fScumbler->GetOutputVolume());\n   76  \n   77:    uint64 samples = fScumbler->GetSampleCount();\n   78     // !!! This should change to reflect the actual saampling rate !!!\n   79     uint64 seconds = samples / 44100;\n   ..\n  104     if (fAddTrackButton == buttonThatWasClicked)\n  105     {\n  106:       fScumbler->AddTrack();\n  107     }\n  108     else if (fPlayButton == buttonThatWasClicked)\n  109     {\n  110:       fScumbler->TogglePlay();\n  111     }\n  112     else if (fResetButton == buttonThatWasClicked)\n  113     {\n  114:       //fScumbler->ResetAllTracks();\n  115:       fScumbler->SeekAllTracksAbsolute(0);\n  116     }\n  117  }\n  ...\n  121     if (fOutputVolume == sliderThatWasMoved)\n  122     {\n  123:       fScumbler->SetOutputVolume(fOutputVolume->getValue());\n  124     }\n  125  \n  ...\n  128  void TransportComponent::changeListenerCallback(ChangeBroadcaster* source)\n  129  {\n  130:    if (fScumbler == source)\n  131     {\n  132        this->repaint();\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TransportComponent.h:\n    8  #include \"JuceHeader.h\"\n    9  \n   10: class Scumbler;\n   11  \n   12  \n   ..\n   17  {\n   18  public:\n   19:    TransportComponent(Scumbler* scumbler);\n   20  \n   21     ~TransportComponent();\n   ..\n   30  private:\n   31  \n   32:    Scumbler* fScumbler;\n   33  \n   34     TextButton* fAddTrackButton;\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Passthrough.h:\n    7  \n    8  #include \"../../JuceLibraryCode/JuceHeader.h\"\n    9: #include \"../ScumblerDefs.h\"\n   10  \n   11  /**\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/SampleCounter.cpp:\n    3  #include \"SampleCounter.h\"\n    4  \n    5: #include \"Scumbler.h\"\n    6  \n    7: SampleCounterProcessor::SampleCounterProcessor(Scumbler* scumbler, \n    8     unsigned int notifyCount, int channelCount)\n    9  :  PassthroughProcessor(channelCount, channelCount) \n   10: ,  fScumbler(scumbler)\n   11  ,  fSamples(0)\n   12  ,  fNotifyCount(notifyCount)\n   ..\n   35  void SampleCounterProcessor::processBlock(AudioSampleBuffer& buffer, MidiBuffer& midiMessages)\n   36  {\n   37:    if (fScumbler->IsPlaying())\n   38     {\n   39        const ScopedLock sl(fMutex);\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/SampleCounter.h:\n    6  #include \"Passthrough.h\"\n    7  \n    8: class Scumbler;\n    9  \n   10  class SampleCounterProcessor  : public PassthroughProcessor\n   ..\n   14     /**\n   15      * Simple no-op processor that keeps track of how many samples it's processed while\n   16:     * the Scumbler that owns it is in a playing state.\n   17      *\n   18:     * @param scumbler The Scumbler object that owns us.\n   19      * @param notifyCount The number of new samples to accumulate before notifying listeners\n   20      * @param channelCount the number of channels we support.\n   21      */\n   22:    SampleCounterProcessor(Scumbler* scumbler, unsigned int notifyCount, int channelCount = 1);\n   23  \n   24     ~SampleCounterProcessor();\n   ..\n   36  \n   37     /**\n   38:     * If the Scumbler that owns us is playing, we add the number of samples in the buffer \n   39      * to our running count. Occasionally we notify listeners that there's new data.\n   40      * @param buffer       [description]\n   ..\n   55  private:\n   56     /**\n   57:     * The Scumbler object that owns us. We don't own it, so don't delete it when \n   58      * we go away.\n   59      */\n   60:    Scumbler* fScumbler;\n   61  \n   62     /**\n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_PluginBlock.cpp:\n  120     /**\n  121      * Fill in a PluginDescription object for the specified node. We use this when \n  122:     * saving a Scumbler to disk.\n  123      * @param  node The NodeId of the plugin we're interested in.\n  124      * @param  desc Empty PluginDescription object to be filled in.   \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_Scumbler.cpp:\n   11  \n   12  \n   13: class ScumblerTest : public UnitTest\n   14  {\n   15  public:\n   16:    ScumblerTest() : UnitTest(\"Scumbler unit tests\")\n   17:                   , fScumbler(nullptr)\n   18     {\n   19  \n   ..\n   22     void initialise()\n   23     {\n   24:       fScumbler = Scumbler::GetInstance();\n   25:       fScumbler->Reset();\n   26  \n   27     };\n   ..\n   29     void shutdown()\n   30     {\n   31:       fScumbler->Reset();\n   32:       fScumbler = nullptr;\n   33     };\n   34  \n   ..\n   37        this->beginTest(\"Initial State\");\n   38        // better not be playing\n   39:       this->expect(!fScumbler->IsPlaying());\n   40        // ...and after a reset, there should only be the input and output nodes.\n   41:       this->expect(2 == fScumbler->fGraph.getNumNodes());\n   42  \n   43        this->beginTest(\"Transport\");\n   44:       fScumbler->Play();\n   45:       this->expect(fScumbler->IsPlaying());\n   46:       fScumbler->Pause();\n   47:       this->expect(!fScumbler->IsPlaying());\n   48  \n   49        this->beginTest(\"Basic Connections\");\n   50:       this->expect(2 == fScumbler->fGraph.getNumNodes());\n   51        // test some bogus states first\n   52        this->expect(tk::kAlreadyConnected == \\\n   53:          fScumbler->Connect(fScumbler->fInputNode, fScumbler->fOutputNode)); \n   54        this->expect(tk::kIllegalConnection == \\\n   55:          fScumbler->Connect(fScumbler->fOutputNode, fScumbler->fInputNode)); \n   56  \n   57        this->expect(tk::kNoSourceNode == \\\n   58:          fScumbler->Connect(0xffffffff, fScumbler->fOutputNode)); \n   59  \n   60  \n   61        this->expect(tk::kNoDestNode == \\\n   62:          fScumbler->Connect(fScumbler->fInputNode, 0xFFFF)); \n   63        // test disconnections.\n   64:       this->expect(fScumbler->fGraph.isConnected(fScumbler->fInputNode, \n   65:          fScumbler->fOutputNode));\n   66:       this->expect(tk::kSuccess == fScumbler->Disconnect(\n   67:          fScumbler->fInputNode, fScumbler->fOutputNode));\n   68:       this->expect(!fScumbler->fGraph.isConnected(fScumbler->fInputNode, \n   69:          fScumbler->fOutputNode));\n   70:       this->expect(tk::kSuccess == fScumbler->Connect(\n   71:          fScumbler->fInputNode, fScumbler->fOutputNode));\n   72:       this->expect(fScumbler->fGraph.isConnected(fScumbler->fInputNode, \n   73:          fScumbler->fOutputNode));\n   74  \n   75        this->beginTest(\"Complex connections\");\n   ..\n   83  \n   84        //  add the 1-in 1-out node to the graph & connect it in the middle.\n   85:       this->expect(2 == fScumbler->fGraph.getNumNodes());\n   86:       uint32 node = fScumbler->AddProcessor(proc);\n   87:       tk::Result r = fScumbler->InsertBetween(\n   88           tk::kInput, node, tk::kOutput);\n   89        this->expect(tk::kSuccess == r);\n   90:       this->expect(3 == fScumbler->fGraph.getNumNodes());\n   91  \n   92:       uint32 node2 = fScumbler->AddProcessor(proc2);\n   93:       r = fScumbler->InsertBetween(\n   94           tk::kInput, node2, tk::kOutput);\n   95        this->expect(tk::kNotConnected == r);\n   96:       r = fScumbler->InsertBetween(node, node2, tk::kOutput);\n   97        this->expect(tk::kSuccess == r);\n   98:       this->expect(4 == fScumbler->fGraph.getNumNodes());\n   99  \n  100        this->beginTest(\"Disconncections\");\n  101:       r = fScumbler->RemoveBetween(tk::kInput, node2, tk::kOutput, false);\n  102        this->expect(tk::kNotConnected == r);\n  103  \n  104:       r = fScumbler->RemoveBetween(tk::kInput, node, node2, false);\n  105        this->expect(tk::kSuccess == r);\n  106:       this->expect(4 == fScumbler->fGraph.getNumNodes());\n  107  \n  108:       r = fScumbler->RemoveBetween(tk::kInput, node2, tk::kOutput, true);\n  109        this->expect(tk::kSuccess == r);\n  110:       this->expect(3 == fScumbler->fGraph.getNumNodes());\n  111     };\n  112  \n  113  private:\n  114:    Scumbler* fScumbler;\n  115  };\n  116  \n  117: static ScumblerTest test;\n  118  \n  119  \n\n/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_Track.cpp:\n   28     void runTest()\n   29     {\n   30:       Scumbler* scumbler = Scumbler::GetInstance();\n   31        this->beginTest(\"Add tracks\");\n   32:       expect(0 == scumbler->GetNumTracks());\n   33:       expect(tk::kSuccess == scumbler->AddTrack());\n   34:       expect(1 == scumbler->GetNumTracks());\n   35:       expect(tk::kSuccess == scumbler->AddTrack());\n   36:       expect(2 == scumbler->GetNumTracks());\n   37:       scumbler->Reset();\n   38        //  make sure that when we do a reset that the tracks also go away.\n   39:       expect(0 == scumbler->GetNumTracks());\n   40  \n   41        this->beginTest(\"Deleting tracks\");\n   42:       expect(tk::kSuccess == scumbler->AddTrack());\n   43:       Track* track = scumbler->GetTrack(1);\n   44        expect(nullptr == track);\n   45:       track = scumbler->GetTrack(0);\n   46        expect(nullptr != track);\n   47        track->SetName(\"first\");\n   48        expect(String(\"first\") == track->GetName());\n   49:       expect(tk::kSuccess == scumbler->AddTrack());\n   50:       track = scumbler->GetTrack(1);\n   51        expect(nullptr != track);\n   52        track->SetName(\"second\");\n   53:       expect(tk::kFailure == scumbler->DeleteTrack(2));\n   54:       expect(tk::kSuccess == scumbler->DeleteTrack(0));\n   55:       expect(1 == scumbler->GetNumTracks());\n   56:       track = scumbler->GetTrack(0);\n   57        expect(nullptr != track);\n   58        expect(String(\"second\") == track->GetName());\n   59  \n   60        this->beginTest(\"Name @ construction\");\n   61:       scumbler->Reset();\n   62:       expect(tk::kSuccess == scumbler->AddTrack(\"zero\"));\n   63:       expect(String(\"zero\") == scumbler->GetTrack(0)->GetName());\n   64:       expect(tk::kSuccess == scumbler->AddTrack(\"one\"));\n   65:       expect(String(\"one\") == scumbler->GetTrack(1)->GetName());\n   66:       expect(tk::kSuccess == scumbler->AddTrack(\"two\"));\n   67:       expect(String(\"two\") == scumbler->GetTrack(2)->GetName());\n   68  \n   69        this->beginTest(\"Moving Tracks\");\n   70:       scumbler->Reset();\n   71        const char* kNames[]  ={\"zero\", \"one\", \"two\", \"three\", nullptr};\n   72        Array<String> names(kNames );\n   73        for (int i = 0; i < names.size(); ++i)\n   74        {\n   75:          expect(tk::kSuccess == scumbler->AddTrack(names[i]));\n   76        }\n   77        for (int i = 0; i < names.size(); ++i)\n   78        {\n   79:          expect(names[i] == scumbler->GetTrack(i)->GetName());\n   80        }\n   81:       scumbler->MoveTrack(0, 1);\n   82:       expect(String(\"one\") == scumbler->GetTrack(0)->GetName());      \n   83:       expect(String(\"zero\") == scumbler->GetTrack(1)->GetName());      \n   84:       expect(String(\"two\") == scumbler->GetTrack(2)->GetName());      \n   85:       expect(String(\"three\") == scumbler->GetTrack(3)->GetName());      \n   86:       scumbler->MoveTrack(0, 1);\n   87:       expect(String(\"zero\") == scumbler->GetTrack(0)->GetName());      \n   88:       expect(String(\"one\") == scumbler->GetTrack(1)->GetName());      \n   89:       expect(String(\"two\") == scumbler->GetTrack(2)->GetName());      \n   90:       expect(String(\"three\") == scumbler->GetTrack(3)->GetName());      \n   91:       scumbler->MoveTrack(0, -1);\n   92:       expect(String(\"one\") == scumbler->GetTrack(0)->GetName());      \n   93:       expect(String(\"two\") == scumbler->GetTrack(1)->GetName());      \n   94:       expect(String(\"three\") == scumbler->GetTrack(2)->GetName());      \n   95:       expect(String(\"zero\") == scumbler->GetTrack(3)->GetName());      \n   96  \n   97:       scumbler->MoveTrack(0, 4);\n   98:       expect(String(\"two\") == scumbler->GetTrack(0)->GetName());      \n   99:       expect(String(\"three\") == scumbler->GetTrack(1)->GetName());      \n  100:       expect(String(\"zero\") == scumbler->GetTrack(2)->GetName());      \n  101:       expect(String(\"one\") == scumbler->GetTrack(3)->GetName());      \n  102:       scumbler->MoveTrack(3, 0);\n  103:       scumbler->MoveTrack(3, 0);\n  104:       expect(String(\"zero\") == scumbler->GetTrack(0)->GetName());      \n  105:       expect(String(\"one\") == scumbler->GetTrack(1)->GetName());      \n  106:       expect(String(\"two\") == scumbler->GetTrack(2)->GetName());      \n  107:       expect(String(\"three\") == scumbler->GetTrack(3)->GetName());  \n  108  \n  109:       scumbler->Reset();\n  110  \n  111  \n\n465 matches across 26 files\n",
			"settings":
			{
				"buffer_size": 61557,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "Scumbler.h",
			"settings":
			{
				"buffer_size": 18959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Scumbler.cpp",
			"settings":
			{
				"buffer_size": 20802,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Track.h",
			"settings":
			{
				"buffer_size": 9724,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PluginConnector.h",
			"settings":
			{
				"buffer_size": 6769,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ScumblerDefs.h",
			"settings":
			{
				"buffer_size": 3764,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Track.cpp",
			"settings":
			{
				"buffer_size": 9810,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 227.0,
		"selected_items":
		[
			[
				"pac in",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"",
				":w - Save"
			],
			[
				":w",
				":w - Save"
			],
			[
				"lore",
				"Snippet: Lorem ipsum"
			],
			[
				"Snippet: ",
				"Snippet: newTask"
			],
			[
				":wa",
				":w - Save"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"tag",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				":q",
				"Set Syntax: SQL"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 143.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/bgporter/personal/tetrakite/scumbler/Source/ScumblerDefs.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginBlockComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Main.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Input.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Loop.cpp",
		"/Users/bgporter/Desktop/testing.xml",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/MainWindow.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/MainWindow.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginBlock.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginBlock.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Track.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Track.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/XmlPersistent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ScumblerComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Commands.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginConnector.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_PluginBlock.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Loop.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/LoopComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/LoopComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TransportComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TransportComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TrackComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/SampleCounter.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/SampleCounter.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Gain.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Gain.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Passthrough.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ScumblerComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginSlotComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginBlockComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/PluginSlotComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/TrackComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Input.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/ComponentDefs.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/WaveformComponent.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/WaveformComponent.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Loop.cpp",
		"/Users/bgporter/temp/fields.py",
		"/Users/bgporter/temp/10things.txt",
		"/Users/bgporter/AnL/Trantor/ApiClient/Trantor.py",
		"/Users/bgporter/AnL/blog/test_Trantor.py",
		"/Users/bgporter/AnL/blog/MoveBudget.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/bgporter/AnL/blog/2KGames.email",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Processors/Passthrough.cpp",
		"/Users/bgporter/AnL/temp/map/ZipData.csv",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginEditorWindow.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler.sublime-project",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginListWindow.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/thumbnail.py",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Components/WaveformPixelBuffer.h",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoRecordPage.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoLatencyPage.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginEditorWindow.h",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_Track.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/PluginListWindow.h",
		"/Users/bgporter/personal/juce/modules/juce_gui_basics/windows/juce_TooltipWindow.cpp",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Package Control.sublime-settings",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/User/Base File.sublime-settings",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Test/test_Scumbler.cpp",
		"/Users/bgporter/personal/tetrakite/scumbler/Source/Scumbler",
		"/Users/bgporter/personal/juce/extras/Introjucer/Source/Project/jucer_ProjectContentComponent.h",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Alignment/Base File.sublime-settings",
		"/Users/bgporter/temp/lister.py",
		"/Users/bgporter/AnL/svn/TrantorClient/Marketing/20121126.txt",
		"/Users/bgporter/personal/tetrakite/scumbler/JuceLibraryCode/modules/juce_audio_basics/juce_audio_basics.mm",
		"/Users/bgporter/personal/juce/docs/JUCE readme.html",
		"/Users/bgporter/personal/juce/docs/gpl.txt",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSetupPage.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSetupPage.h",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSynthPage.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoTabComponent.h",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoTabComponent.cpp",
		"/Users/bgporter/personal/juce/extras/JuceDemo/Source/demos/AudioDemoSynthPage.h",
		"/Users/bgporter/personal/juce/modules/juce_audio_devices/juce_audio_devices.h",
		"/Users/bgporter/personal/juce/modules/juce_audio_devices/juce_audio_devices.cpp",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/SublimeBlockCursor/SublimeBlockCursor.py",
		"/Users/bgporter/incoming/spfmba/committee.html",
		"/Users/bgporter/incoming/spfmba/CommitteePeople.txt",
		"/Users/bgporter/incoming/spfmba/CommitteeTable.py",
		"/Users/bgporter/incoming/spfmba/rows.txt",
		"/Users/bgporter/AnL/ArtLogic/CodeReviews/AlDocs/TaskList.txt",
		"/Users/bgporter/personal/juce/README.txt",
		"/Users/bgporter/temp/linenum.py",
		"/Users/bgporter/temp/showLine.py",
		"/Users/bgporter/AnL/svn/TrantorClient/Marketing/20121015.txt",
		"/Users/bgporter/AnL/git/Estimator/docs/dev_guide.xhtml",
		"/Users/bgporter/personal/utilities/mp3/mover/artistTest.py",
		"/Users/bgporter/AnL/tests/Gurrola/Part 1a/main.cpp",
		"/Users/bgporter/AnL/tests/Gurrola/Part 1a/fp32.h",
		"/Users/bgporter/AnL/tests/Gurrola/Part 2/text.h",
		"/Users/bgporter/AnL/tests/Gurrola/Part 2/text.cpp",
		"/Users/bgporter/AnL/tests/Gurrola/Part 2/main.cpp",
		"/Users/bgporter/AnL/tests/Gurrola/Part 1a/fp32.cpp",
		"/Users/bgporter/personal/utilities/mp3/mover/echonest.py",
		"/Users/bgporter/personal/utilities/mp3/mover/mover.py",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge2/ConfigObjects.php",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge2/ConfigReader.php",
		"/Users/bgporter/AnL/ArtLogic/CodeReviews/AlDocs/boiler.txt",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge3/Brokenc.c",
		"/Users/bgporter/AnL/tests/culhane/alpc-solutions/Part1b/index.html",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1A-Info.plist",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1A-Prefix.pch",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1AAppDelegate.h",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/Challenge1AAppDelegate.mm",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/FixedPointRepresentation.cpp",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/FixedPointRepresentation.h",
		"/Users/bgporter/AnL/tests/pisarro/NickPisarroJr/Challenge1A/Challenge1A/main.m",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Controller.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Buzzword.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/LocalConfig.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Day.py",
		"/Users/bgporter/AnL/temp/discount.py",
		"/Users/bgporter/AnL/ArtLogic/DevPractices/Buzzword/Config.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Default/Global.sublime-settings",
		"/Users/bgporter/temp/methods.py",
		"/Users/bgporter/Library/Application Support/Sublime Text 2/Packages/Default/Base File.sublime-settings",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/appengine_config.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/context.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/date.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/help.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/mapper.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/models.py",
		"/Users/bgporter/personal/wastebook/branches/tag-branch/wb2/AppEngine/nav.py"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"scumbler",
			"*.scumbler",
			"Save",
			"LoadXml",
			"Activate",
			"midiChannelNumber",
			"CreateNewScumblerAndComponent",
			"AddTrack",
			"Reset",
			"Callback",
			"fLoopPos",
			"fInputActive",
			"Menu",
			"Play",
			"Node",
			"kPreEffects",
			"AddTrac",
			"      \n",
			"   \n",
			"fActiveTrackIndex",
			"GetActiveTrackIndex",
			"Reset",
			"fScum",
			"GetTh",
			"REsetAll",
			"Reset",
			"Find",
			"Index",
			"fSample",
			"addChange",
			"SampleC",
			"   \n",
			"Special",
			"Play",
			"ConnectToPl",
			"change",
			"ConnectT",
			"AddTra",
			"isPlayi",
			"fTracks",
			"Change",
			"InsertBe",
			"::Connect",
			"ConnectTonn",
			"ConnectTo",
			"Index",
			"};\n",
			"fPanRe",
			"\n         ",
			"fgain",
			"GetPa",
			"Display",
			"getMagni",
			"fLoop",
			"Point",
			"InputPro",
			"\"\n",
			"ConnectTo",
			"ConnectToTrack",
			"Change",
			"  \n",
			"PluginBlockComponent",
			"Change",
			"Mute(",
			"fCenterLineStartX",
			"fCenterLineStopX",
			"GetTr",
			"fSlots",
			"ViewPlugins",
			"CommandIds::",
			"ViewPlugins",
			"kViewPlugins",
			"ViewPlugins",
			"IsActive",
			"ViewPlugins",
			"Listen",
			"changeLis",
			".\n",
			"ActivateTr",
			"setColour",
			"ignore",
			"Ferg",
			"Thys",
			"Reset",
			"   \n",
			".)",
			"addChan",
			"addCha",
			"fInputNode",
			"kPluginSlotHeight",
			"outputDebugString",
			"fNowIndex",
			"LoopSizeChanged",
			"SetLoopD",
			"LoopSizeChanged",
			"CalculateSamplesPerPixel",
			"fPendingSamples",
			"min",
			".\n",
			"fDirtyStart",
			"LoopInfo",
			"fPixelData",
			"GetThum",
			"ViewPlugins",
			"//",
			"201",
			"         \n",
			".\n",
			"   \n",
			"    \n",
			"()));\n",
			"();\n",
			"    \n",
			"() ",
			"\n",
			"ConnectToLoop",
			"LoopComponent",
			"getCurrentAudio",
			"IsPl",
			"new TrackComponent",
			"jmax",
			"addChan",
			"jmax",
			"fPluginName",
			"desc",
			"FindPlug",
			"ViewPlugins",
			"addDefaultFormats"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			">>",
			"<<",
			"1px",
			"th"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Components/ScumblerComponent.cpp",
					"settings":
					{
						"buffer_size": 10771,
						"regions":
						{
						},
						"selection":
						[
							[
								6938,
								6938
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 565.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Components/TrackComponent.cpp",
					"settings":
					{
						"buffer_size": 17703,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7313.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "MainWindow.h",
					"settings":
					{
						"buffer_size": 4760,
						"regions":
						{
						},
						"selection":
						[
							[
								4687,
								4687
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2124.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "MainWindow.cpp",
					"settings":
					{
						"buffer_size": 15039,
						"regions":
						{
							"bookmark_l":
							{
								"flags": 144,
								"regions":
								[
									[
										6326,
										6326
									]
								]
							}
						},
						"selection":
						[
							[
								6344,
								6344
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3162.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 61557,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										258,
										266
									],
									[
										405,
										413
									],
									[
										578,
										586
									],
									[
										646,
										654
									],
									[
										802,
										810
									],
									[
										1017,
										1025
									],
									[
										1244,
										1252
									],
									[
										1406,
										1414
									],
									[
										1638,
										1646
									],
									[
										1763,
										1771
									],
									[
										1830,
										1838
									],
									[
										1845,
										1853
									],
									[
										1899,
										1907
									],
									[
										1992,
										2000
									],
									[
										2127,
										2135
									],
									[
										2229,
										2237
									],
									[
										2489,
										2497
									],
									[
										2516,
										2524
									],
									[
										2535,
										2543
									],
									[
										2777,
										2785
									],
									[
										2907,
										2915
									],
									[
										3051,
										3059
									],
									[
										3104,
										3112
									],
									[
										3261,
										3269
									],
									[
										3337,
										3345
									],
									[
										3529,
										3537
									],
									[
										3725,
										3733
									],
									[
										3790,
										3798
									],
									[
										3849,
										3857
									],
									[
										4005,
										4013
									],
									[
										4058,
										4066
									],
									[
										4073,
										4081
									],
									[
										4180,
										4188
									],
									[
										4393,
										4401
									],
									[
										4548,
										4556
									],
									[
										4591,
										4599
									],
									[
										4631,
										4639
									],
									[
										4711,
										4719
									],
									[
										4974,
										4982
									],
									[
										5001,
										5009
									],
									[
										5020,
										5028
									],
									[
										5370,
										5378
									],
									[
										5692,
										5700
									],
									[
										5926,
										5934
									],
									[
										6176,
										6184
									],
									[
										6330,
										6338
									],
									[
										6456,
										6464
									],
									[
										6626,
										6634
									],
									[
										6769,
										6777
									],
									[
										6949,
										6957
									],
									[
										7108,
										7116
									],
									[
										7363,
										7371
									],
									[
										7494,
										7502
									],
									[
										7552,
										7560
									],
									[
										7755,
										7763
									],
									[
										7795,
										7803
									],
									[
										7966,
										7974
									],
									[
										8135,
										8143
									],
									[
										8252,
										8260
									],
									[
										8516,
										8524
									],
									[
										8728,
										8736
									],
									[
										8985,
										8993
									],
									[
										8996,
										9004
									],
									[
										9187,
										9195
									],
									[
										9250,
										9258
									],
									[
										9259,
										9267
									],
									[
										9466,
										9474
									],
									[
										9707,
										9715
									],
									[
										9963,
										9971
									],
									[
										10262,
										10270
									],
									[
										10451,
										10459
									],
									[
										10703,
										10711
									],
									[
										10964,
										10972
									],
									[
										11246,
										11254
									],
									[
										11577,
										11585
									],
									[
										11732,
										11740
									],
									[
										11928,
										11936
									],
									[
										12170,
										12178
									],
									[
										12471,
										12479
									],
									[
										12484,
										12492
									],
									[
										12811,
										12819
									],
									[
										12987,
										12995
									],
									[
										13126,
										13134
									],
									[
										13519,
										13527
									],
									[
										13775,
										13783
									],
									[
										14004,
										14012
									],
									[
										14087,
										14095
									],
									[
										14265,
										14273
									],
									[
										14529,
										14537
									],
									[
										14924,
										14932
									],
									[
										15015,
										15023
									],
									[
										15184,
										15192
									],
									[
										15229,
										15237
									],
									[
										15449,
										15457
									],
									[
										15824,
										15832
									],
									[
										16121,
										16129
									],
									[
										16353,
										16361
									],
									[
										16406,
										16414
									],
									[
										16483,
										16491
									],
									[
										16493,
										16501
									],
									[
										16754,
										16762
									],
									[
										16781,
										16789
									],
									[
										16871,
										16879
									],
									[
										16882,
										16890
									],
									[
										17038,
										17046
									],
									[
										17110,
										17118
									],
									[
										17238,
										17246
									],
									[
										17359,
										17367
									],
									[
										17475,
										17483
									],
									[
										17560,
										17568
									],
									[
										17809,
										17817
									],
									[
										17911,
										17919
									],
									[
										18093,
										18101
									],
									[
										18186,
										18194
									],
									[
										18320,
										18328
									],
									[
										18474,
										18482
									],
									[
										18597,
										18605
									],
									[
										18607,
										18615
									],
									[
										18707,
										18715
									],
									[
										18832,
										18840
									],
									[
										18961,
										18969
									],
									[
										19054,
										19062
									],
									[
										19229,
										19237
									],
									[
										19353,
										19361
									],
									[
										19528,
										19536
									],
									[
										19670,
										19678
									],
									[
										19776,
										19784
									],
									[
										19902,
										19910
									],
									[
										20053,
										20061
									],
									[
										20213,
										20221
									],
									[
										20392,
										20400
									],
									[
										20553,
										20561
									],
									[
										20639,
										20647
									],
									[
										20723,
										20731
									],
									[
										20831,
										20839
									],
									[
										20976,
										20984
									],
									[
										21137,
										21145
									],
									[
										21325,
										21333
									],
									[
										21473,
										21481
									],
									[
										21693,
										21701
									],
									[
										21850,
										21858
									],
									[
										21982,
										21990
									],
									[
										22105,
										22113
									],
									[
										22233,
										22241
									],
									[
										22376,
										22384
									],
									[
										22499,
										22507
									],
									[
										22621,
										22629
									],
									[
										22725,
										22733
									],
									[
										22859,
										22867
									],
									[
										23011,
										23019
									],
									[
										23225,
										23233
									],
									[
										23367,
										23375
									],
									[
										23534,
										23542
									],
									[
										23696,
										23704
									],
									[
										23831,
										23839
									],
									[
										23954,
										23962
									],
									[
										24139,
										24147
									],
									[
										24295,
										24303
									],
									[
										24457,
										24465
									],
									[
										24618,
										24626
									],
									[
										24785,
										24793
									],
									[
										24978,
										24986
									],
									[
										25125,
										25133
									],
									[
										25151,
										25159
									],
									[
										25260,
										25268
									],
									[
										25336,
										25344
									],
									[
										25471,
										25479
									],
									[
										25671,
										25679
									],
									[
										25869,
										25877
									],
									[
										26021,
										26029
									],
									[
										26097,
										26105
									],
									[
										26279,
										26287
									],
									[
										26467,
										26475
									],
									[
										26626,
										26634
									],
									[
										26850,
										26858
									],
									[
										27152,
										27160
									],
									[
										27326,
										27334
									],
									[
										27639,
										27647
									],
									[
										28034,
										28042
									],
									[
										28125,
										28133
									],
									[
										28437,
										28445
									],
									[
										28482,
										28490
									],
									[
										28702,
										28710
									],
									[
										29077,
										29085
									],
									[
										29346,
										29354
									],
									[
										29475,
										29483
									],
									[
										29768,
										29776
									],
									[
										29810,
										29818
									],
									[
										30133,
										30141
									],
									[
										30361,
										30369
									],
									[
										30723,
										30731
									],
									[
										31018,
										31026
									],
									[
										31268,
										31276
									],
									[
										31346,
										31354
									],
									[
										31385,
										31393
									],
									[
										31523,
										31531
									],
									[
										31558,
										31566
									],
									[
										31750,
										31758
									],
									[
										31956,
										31964
									],
									[
										32168,
										32176
									],
									[
										32328,
										32336
									],
									[
										32358,
										32366
									],
									[
										32557,
										32565
									],
									[
										32718,
										32726
									],
									[
										32728,
										32736
									],
									[
										32917,
										32925
									],
									[
										32998,
										33006
									],
									[
										33164,
										33172
									],
									[
										33209,
										33217
									],
									[
										33277,
										33285
									],
									[
										33483,
										33491
									],
									[
										33622,
										33630
									],
									[
										33840,
										33848
									],
									[
										33888,
										33896
									],
									[
										34065,
										34073
									],
									[
										34107,
										34115
									],
									[
										34275,
										34283
									],
									[
										34364,
										34372
									],
									[
										34456,
										34464
									],
									[
										34582,
										34590
									],
									[
										34650,
										34658
									],
									[
										34771,
										34779
									],
									[
										34897,
										34905
									],
									[
										35115,
										35123
									],
									[
										35278,
										35286
									],
									[
										35556,
										35564
									],
									[
										35785,
										35793
									],
									[
										35933,
										35941
									],
									[
										36197,
										36205
									],
									[
										36316,
										36324
									],
									[
										36467,
										36475
									],
									[
										36671,
										36679
									],
									[
										36870,
										36878
									],
									[
										37050,
										37058
									],
									[
										37091,
										37099
									],
									[
										37271,
										37279
									],
									[
										37550,
										37558
									],
									[
										37824,
										37832
									],
									[
										37989,
										37997
									],
									[
										38104,
										38112
									],
									[
										38220,
										38228
									],
									[
										38231,
										38239
									],
									[
										38314,
										38322
									],
									[
										38544,
										38552
									],
									[
										38781,
										38789
									],
									[
										38996,
										39004
									],
									[
										39142,
										39150
									],
									[
										39161,
										39169
									],
									[
										39180,
										39188
									],
									[
										39190,
										39198
									],
									[
										39229,
										39237
									],
									[
										39254,
										39262
									],
									[
										39263,
										39271
									],
									[
										39455,
										39463
									],
									[
										39553,
										39561
									],
									[
										39718,
										39726
									],
									[
										39871,
										39879
									],
									[
										39900,
										39908
									],
									[
										40019,
										40027
									],
									[
										40039,
										40047
									],
									[
										40265,
										40273
									],
									[
										40417,
										40425
									],
									[
										40560,
										40568
									],
									[
										40823,
										40831
									],
									[
										40965,
										40973
									],
									[
										41106,
										41114
									],
									[
										41331,
										41339
									],
									[
										41542,
										41550
									],
									[
										41770,
										41778
									],
									[
										42024,
										42032
									],
									[
										42210,
										42218
									],
									[
										42454,
										42462
									],
									[
										42620,
										42628
									],
									[
										42781,
										42789
									],
									[
										43130,
										43138
									],
									[
										43371,
										43379
									],
									[
										43468,
										43476
									],
									[
										43569,
										43577
									],
									[
										43650,
										43658
									],
									[
										43778,
										43786
									],
									[
										44000,
										44008
									],
									[
										44140,
										44148
									],
									[
										44305,
										44313
									],
									[
										44405,
										44413
									],
									[
										44514,
										44522
									],
									[
										44732,
										44740
									],
									[
										44770,
										44778
									],
									[
										44936,
										44944
									],
									[
										44946,
										44954
									],
									[
										44979,
										44987
									],
									[
										44988,
										44996
									],
									[
										45306,
										45314
									],
									[
										45324,
										45332
									],
									[
										45383,
										45391
									],
									[
										45401,
										45409
									],
									[
										45548,
										45556
									],
									[
										45721,
										45729
									],
									[
										45798,
										45806
									],
									[
										45867,
										45875
									],
									[
										46019,
										46027
									],
									[
										46306,
										46314
									],
									[
										46325,
										46333
									],
									[
										46335,
										46343
									],
									[
										46358,
										46366
									],
									[
										46618,
										46626
									],
									[
										46848,
										46856
									],
									[
										46859,
										46867
									],
									[
										47123,
										47131
									],
									[
										47203,
										47211
									],
									[
										47221,
										47229
									],
									[
										47518,
										47526
									],
									[
										47582,
										47590
									],
									[
										47923,
										47931
									],
									[
										48191,
										48199
									],
									[
										48566,
										48574
									],
									[
										48640,
										48648
									],
									[
										48650,
										48658
									],
									[
										48713,
										48721
									],
									[
										48722,
										48730
									],
									[
										48857,
										48865
									],
									[
										49022,
										49030
									],
									[
										49192,
										49200
									],
									[
										49258,
										49266
									],
									[
										49494,
										49502
									],
									[
										49610,
										49618
									],
									[
										49731,
										49739
									],
									[
										49773,
										49781
									],
									[
										49913,
										49921
									],
									[
										50099,
										50107
									],
									[
										50298,
										50306
									],
									[
										50383,
										50391
									],
									[
										50393,
										50401
									],
									[
										50485,
										50493
									],
									[
										50496,
										50504
									],
									[
										50712,
										50720
									],
									[
										50888,
										50896
									],
									[
										50962,
										50970
									],
									[
										50972,
										50980
									],
									[
										51108,
										51116
									],
									[
										51117,
										51125
									],
									[
										51317,
										51325
									],
									[
										51527,
										51535
									],
									[
										51743,
										51751
									],
									[
										51821,
										51829
									],
									[
										51834,
										51842
									],
									[
										52078,
										52086
									],
									[
										52088,
										52096
									],
									[
										52240,
										52248
									],
									[
										52509,
										52517
									],
									[
										52630,
										52638
									],
									[
										52641,
										52649
									],
									[
										52878,
										52886
									],
									[
										53150,
										53158
									],
									[
										53215,
										53223
									],
									[
										53242,
										53250
									],
									[
										53292,
										53300
									],
									[
										53390,
										53398
									],
									[
										53401,
										53409
									],
									[
										53440,
										53448
									],
									[
										53538,
										53546
									],
									[
										53571,
										53579
									],
									[
										53731,
										53739
									],
									[
										53874,
										53882
									],
									[
										53972,
										53980
									],
									[
										54017,
										54025
									],
									[
										54055,
										54063
									],
									[
										54102,
										54110
									],
									[
										54217,
										54225
									],
									[
										54365,
										54373
									],
									[
										54384,
										54392
									],
									[
										54407,
										54415
									],
									[
										54504,
										54512
									],
									[
										54523,
										54531
									],
									[
										54547,
										54555
									],
									[
										54646,
										54654
									],
									[
										54677,
										54685
									],
									[
										54783,
										54791
									],
									[
										54802,
										54810
									],
									[
										54899,
										54907
									],
									[
										54929,
										54937
									],
									[
										54969,
										54977
									],
									[
										55037,
										55045
									],
									[
										55076,
										55084
									],
									[
										55099,
										55107
									],
									[
										55152,
										55160
									],
									[
										55182,
										55190
									],
									[
										55222,
										55230
									],
									[
										55290,
										55298
									],
									[
										55326,
										55334
									],
									[
										55349,
										55357
									],
									[
										55401,
										55409
									],
									[
										55431,
										55439
									],
									[
										55471,
										55479
									],
									[
										55685,
										55693
									],
									[
										55746,
										55754
									],
									[
										55805,
										55813
									],
									[
										55956,
										55964
									],
									[
										56026,
										56034
									],
									[
										56075,
										56083
									],
									[
										56218,
										56226
									],
									[
										56347,
										56355
									],
									[
										56455,
										56463
									],
									[
										56596,
										56604
									],
									[
										56731,
										56739
									],
									[
										56790,
										56798
									],
									[
										56931,
										56939
									],
									[
										57011,
										57019
									],
									[
										57022,
										57030
									],
									[
										57064,
										57072
									],
									[
										57222,
										57230
									],
									[
										57232,
										57240
									],
									[
										57243,
										57251
									],
									[
										57337,
										57345
									],
									[
										57400,
										57408
									],
									[
										57448,
										57456
									],
									[
										57511,
										57519
									],
									[
										57559,
										57567
									],
									[
										57599,
										57607
									],
									[
										57724,
										57732
									],
									[
										57844,
										57852
									],
									[
										57895,
										57903
									],
									[
										57978,
										57986
									],
									[
										58172,
										58180
									],
									[
										58216,
										58224
									],
									[
										58353,
										58361
									],
									[
										58416,
										58424
									],
									[
										58468,
										58476
									],
									[
										58516,
										58524
									],
									[
										58711,
										58719
									],
									[
										58766,
										58774
									],
									[
										58833,
										58841
									],
									[
										58904,
										58912
									],
									[
										58969,
										58977
									],
									[
										59040,
										59048
									],
									[
										59105,
										59113
									],
									[
										59208,
										59216
									],
									[
										59454,
										59462
									],
									[
										59602,
										59610
									],
									[
										59665,
										59673
									],
									[
										59729,
										59737
									],
									[
										59808,
										59816
									],
									[
										59886,
										59894
									],
									[
										59966,
										59974
									],
									[
										60020,
										60028
									],
									[
										60085,
										60093
									],
									[
										60163,
										60171
									],
									[
										60241,
										60249
									],
									[
										60321,
										60329
									],
									[
										60375,
										60383
									],
									[
										60440,
										60448
									],
									[
										60518,
										60526
									],
									[
										60598,
										60606
									],
									[
										60677,
										60685
									],
									[
										60739,
										60747
									],
									[
										60803,
										60811
									],
									[
										60883,
										60891
									],
									[
										60962,
										60970
									],
									[
										61040,
										61048
									],
									[
										61094,
										61102
									],
									[
										61134,
										61142
									],
									[
										61199,
										61207
									],
									[
										61277,
										61285
									],
									[
										61355,
										61363
									],
									[
										61435,
										61443
									],
									[
										61493,
										61501
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								64,
								64
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Scumbler.h",
					"settings":
					{
						"buffer_size": 18959,
						"regions":
						{
						},
						"selection":
						[
							[
								18018,
								18018
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1614.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Scumbler.cpp",
					"settings":
					{
						"buffer_size": 20802,
						"regions":
						{
						},
						"selection":
						[
							[
								5147,
								5147
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3370.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Track.h",
					"settings":
					{
						"buffer_size": 9724,
						"regions":
						{
						},
						"selection":
						[
							[
								4461,
								4461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "PluginConnector.h",
					"settings":
					{
						"buffer_size": 6769,
						"regions":
						{
						},
						"selection":
						[
							[
								6332,
								6335
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2255.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "ScumblerDefs.h",
					"settings":
					{
						"buffer_size": 3764,
						"regions":
						{
						},
						"selection":
						[
							[
								2759,
								2759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 876.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Track.cpp",
					"settings":
					{
						"buffer_size": 9810,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1559.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"sc",
				"Scumbler.cpp"
			],
			[
				"fil",
				"FilterGraph.cpp"
			],
			[
				"at",
				"Assembler_test.py"
			],
			[
				"ass",
				"Assembler.py"
			],
			[
				"art",
				"artistTest.py"
			],
			[
				"ec",
				"echonest.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 270.0,
	"status_bar_visible": true
}
